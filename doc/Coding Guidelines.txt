/**
 *  Coding Guidelines for CFS
 *
 *@author     matt rajkowski
 *@created    August 26, 2002
 *@version    $Id$
 */

Review http://java.sun.com/docs/codeconv/ for coding conventions
 
Commenting Code:
  - Comment code using JavaDoc style
  - Each class should have "@author" "@created" and "@version" tags
  
Working with Java Objects:
  When implementing object specific code, consider creating generic
  and reuseable code that other objects can use.
  
  Objects tend to map to real world processes and things
  - Think about the object irrespective of the data store
  - Consider the properties that make up an object
  - Object properties should be private or protected, never public.
    This ensures that other code will retrieve the properties as intended.
    Use protected if the object will be extended.
  - Good default values for various variable types are:
    String = null;
    int = -1;
  - For methods and properties, do not use "_" in the name.
    Ex: private String firstName = null;
        public String getFirstName()
  - CFS base classes that represent nouns should have a List class as well
    for the synchronization API
    Ex: Task, TaskList
  - CFS base classes should always have an "id" property for the synchronization
    API
  - CFS list classes should allow for filtering the table by setting a variable on
    the list object.  Example, if you want all Opportunities owned by a user, 
    then you could do: 
      OpportunityList opportunityList = new OpportunityList();
      opportunityList.setOwner(5);
      opportunityList.buildList(db);
  - CFS module classes are responsible for collecting data for a response to a
    client, code should not be implemented at this level, but at the base class
    level
  
  String vs. StringBuffer
  - Use StringBuffer when appending multiple strings together
  - Use String when not appending multiple strings together,
    do not use "thisString = thisString + anotherString" -- use a StringBuffer
  
  JDBC
  - Use a PreparedStatement whenever a query will have variables
    Ex. "DELETE FROM campaign WHERE campaign_id = ?"
  
Variable Names:
  - Use meaningful names: object variables tend to be nouns, 
    methods tend to be verbs
    Ex. getDynamicForm(String formName) instead of getDynamicForm(String which)
        unless which is documented
    
CSS:
  - Each html element should have its own CSS class.
    Ex. The classes "containerHeader", "containerMenu", "containerBack", 
        "containerBody" make up the color and layout scheme for module sub-menus.
        You wouldn't want to use these for other page elements.
  - Each browser also has its own CSS file for compatibility, make sure to
    update all other CSS files.
    
HTML:
  - It is proper to put all attributes in double quotes.  Do not use single quotes
    since this will cause a problem when using strings.
    Ex. <td width="125" valign="center" nowrap class="formLabel">
  - Html links should not have a "/" before the URL.  This will allow CFS
    to be used as the root site and a sub-site.  Java URL resources, however,
    need the "/" before the URL.
    Ex. In cfs-config.xml use: resource="/Process.do?command=whatever"
    Ex. In HTML use <a href="Process.do?command=whatever">
  - When displaying text for an object, whether in a .html, .jsp or servlet class,
    use string conversion methods to handle "null" and blank text.
    Ex: In a JSP, output text using toHtml(aString)
    Ex: In a JSP, output text as a default value using toHtmlValue(aString)
        Use toString(aString) within a TEXTAREA
    Ex: In a servlet, build text as StringUtils.toString(aString)
    
MVC Modules:
  - Modules need to handle exceptions and should not throw exceptions.
    When an exception occurs in a module, catch it and store it in the
    request so that all errors can be logged and a nice message can be presented
    to the user.
    All code that could cause an exception should be trapped.
  - Use database connections efficiently... when a connection is needed
    retrieve one from the pool, do operations, then free it for another
    user or process to use.


==========================
HTML Style Guide

Displaying contact names:
- Always use thisContact."getNameLastFirst" or "getNameFirstLast" or 
  "Contact.getNameLastFirst(last, first)" when displaying names.  This will
  ensure name are retrieved correctly.

==========================
Reserved system properties

System.getProperty("MailServer");




