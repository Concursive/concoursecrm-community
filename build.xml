<!--
 $Id$

 Notes:
   This script builds the Centric Suite
   
   The easiest way to get started is to run "ant deploy"

   The build process will instruct you to have several environment variables
   and to customize the build.properties.  The build will fail until all
   installation conditions are met.
   
   Do not edit master.properties in this folder, a copy will be
   made by the installation and you will be notified of the file to modify.
   
   The build process needs write access to the destination web-app folder and
   the fileLibrary configured in Centric CRM
-->
<project name="Centric Suite" default="usage" basedir=".">
  
  <!-- enable environment variables -->
  <property environment="env"/>

  <!-- computed properties -->
  <property name="fs" value="${file.separator}"/>
  <property name="lf" value="${line.separator}"/>
  <property name="base.dir" value="${basedir}"/>
  <property name="bin.dir" value="${base.dir}${fs}bin"/>
  <property name="doc.dir" value="${base.dir}${fs}doc"/>
  <property name="lib.dir" value="${base.dir}${fs}lib"/>
  <property name="src.dir" value="${base.dir}${fs}src"/>
  <property name="src.classes.dir" value="${src.dir}${fs}java"/>
  <property name="src.web.dir" value="${src.dir}${fs}web"/>
  <property name="src.sql.dir" value="${src.dir}${fs}sql"/>
  <property name="build.dir" value="${base.dir}${fs}build"/>
  <property name="build.lib.dir" value="${build.dir}${fs}lib"/>
  <property name="build.classes.dir" value="${build.dir}${fs}classes"/>
  <property name="build.jsp.dir" value="${build.dir}${fs}jsp"/>
  <property name="build.jspclasses.dir" value="${build.dir}${fs}jspclasses"/>
  <property name="build.sql.dir" value="${build.dir}${fs}sql"/>
  <property name="build.docs.dir" value="${build.dir}${fs}docs"/>
  <property name="build.pref.dir" value="${build.dir}${fs}pref"/>
  <property name="pref.dir" value="${base.dir}${fs}pref"/>
  <property name="dist.dir" value="${base.dir}${fs}dist"/>

  <!-- Typical usage -->
  <target name="usage">
    <echo message="Further instructions will appear if settings are missing"/>
    <echo message=""/>
    <echo message="ant deploy: compile, build, copy, and generate web application (production)"/>
    <echo message="ant dev: same as deploy, but doesn't do a clean compile (development)"/>
    <echo message="ant installdb: create tables, insert base records and permissions into new database"/>
    <echo message="    install.database: just create the tables"/>
    <echo message="    install.help: just install the help contents"/>
    <echo message="ant upgradedb: upgrades database with a specified script file"/>
    <echo message="ant docs: generate JavaDocs for all packages"/>
    <echo message="ant test: compile deployed JSPs to check for errors"/>
    <echo message="ant war: generate a .war file for manual deployment"/>
    <echo message="ant clean: delete the temporary build folder used by the install"/>
  </target>
  
  <!-- Environment variables must be set before continuing -->
  <target name="init.environment">
    <tstamp>
      <format property="date.short" pattern="yyyyMMdd-HHmmss"/>
    </tstamp>
    <tstamp>
      <format property="date.long" pattern="yyyy-MM-dd hh:mm:ss aa"/>
    </tstamp>
    <!-- log the build -->
    <record name="${base.dir}/build.log" append="no"/>
  </target>
  
  <!-- See if servlet API file exists -->
  <target name="init.servlet4.exists" depends="init.environment">
    <available file="${CATALINA_HOME}/common/lib/servlet.jar"
      property="build.servlet4.present"/>
  </target>
  <target name="init.servlet4.set" depends="init.servlet4.exists" if="build.servlet4.present">
    <property name="servletJar" value="${CATALINA_HOME}${fs}common${fs}lib${fs}servlet.jar"/>
    <echo message="Web Server: Tomcat 4.x"/>
  </target>
  <target name="init.servlet5.exists" depends="init.environment">
    <available file="${CATALINA_HOME}/common/lib/servlet-api.jar"
      property="build.servlet5.present"/>
  </target>
  <target name="init.servlet5.set" depends="init.servlet5.exists" if="build.servlet5.present">
    <property name="servletJar" value="${CATALINA_HOME}${fs}common${fs}lib${fs}servlet-api.jar"/>
    <echo message="Web Server: Tomcat 5.x"/>
  </target>
  
  <!-- See where the build.properties file exists -->
  <target name="init.buildfile.exists">
    <property file="${base.dir}/home.properties"/>
    <condition property="CENTRIC_HOME" value="${env.CENTRIC_HOME}">
      <available file="${env.CENTRIC_HOME}" />
    </condition>
    <condition property="CENTRIC_FILELIBRARY" value="${env.CENTRIC_FILELIBRARY}">
      <available file="${env.CENTRIC_FILELIBRARY}" />
    </condition>
    <fail unless="CENTRIC_HOME">Initialization aborted

  SOLUTION:

    Either...

    1. Create a file called "home.properties" in this directory with the CENTRIC_HOME property:

      CENTRIC_HOME=/path/to/apache-tomcat/webapps/centric

    or...

    2. Create an environment variable CENTRIC_HOME which points to Tomcat's Centric CRM webapp directory.

      Ex. "export CENTRIC_HOME=/path/to/apache-tomcat/webapps/centric"
      Ex. "Using System in Control Panel set CENTRIC_HOME=c:\Program Files\Apache Software Foundation\Tomcat 5.5\webapps"
    </fail>
    <fail unless="CENTRIC_FILELIBRARY">Initialization aborted

  SOLUTION:

    Either...

    1. Create a file called "home.properties" in this directory with the CENTRIC_FILELIBRARY property:

      CENTRIC_FILELIBRARY=/var/lib/centric_crm/fileLibrary

    or...

    2. Create an environment variable CENTRIC_FILELIBRARY which points to Centric CRM's target fileLibrary.
       The fileLibrary should be separate from CENTRIC_HOME because it contains custom files for Centric CRM.

      Ex. "export CENTRIC_FILELIBRARY=/var/lib/centric_crm/fileLibrary"
      Ex. "export CENTRIC_FILELIBRARY=/Library/Application\ Support/CentricCRM/fileLibrary"
      Ex. "Using System in Control Panel set CENTRIC_FILELIBRARY=c:\CentricCRM\fileLibrary"
    </fail>
    <property name="build.config.filename" value="${CENTRIC_FILELIBRARY}/build.properties" />
    <condition property="build.config.present">
      <and>
        <isset property="build.config.filename"/>
        <available file="${build.config.filename}" type="file"/>
      </and>
    </condition>
    <available file="${base.dir}/lib/mail.jar" property="build.lib.present"/>
  </target>

  <target name="init.buildfile.type" depends="init.buildfile.exists" unless="build.config.present">
    <echo message="Setting up the build.properties file for the first time..." />
  </target>

  <target name="init.home.setup" depends="init.buildfile.type" unless="build.config.war">
    <!-- Check the current directory for a CENTRIC_HOME, else use the global variable -->
    <mkdir dir="${CENTRIC_HOME}/WEB-INF"/>
    <mkdir dir="${CENTRIC_FILELIBRARY}"/>
  </target>
  
  <!-- Create the properties file if not exists -->
  <target name="init.buildfile.create" depends="init.buildfile.exists, init.buildfile.type, init.home.setup"
    unless="build.config.present">
    <copy file="${base.dir}/master.properties" tofile="${build.config.filename}"
      overwrite="false"/>
    <available file="${build.config.filename}" property="build.config.present"/>
  </target>

  <!-- Load the properties for this system, stop here if not found -->
  <target name="init.loadproperties" depends="init.buildfile.create">
    <!-- IF src build.properties is newer than build.properties, abort now and have user update -->
    <uptodate property="build.config.uptodate"
      srcfile="${base.dir}/master.properties"
      targetfile="${build.config.filename}"/>
    <fail unless="build.config.uptodate">Initialization aborted

  The build.properties file might be out of date.
  Compare and update the site copy with the source template, making any necessary changes.

      Site File: ${build.config.filename}
      Source Template: master.properties</fail>
    <loadproperties srcFile="${build.config.filename}">
      <filterchain>
        <filterreader classname="org.apache.tools.ant.filters.StripLineComments">
          <param type="comment" value="#"/>
        </filterreader>
      </filterchain>
    </loadproperties>
    <fail unless="build.lib.present">Initialization aborted

  SOLUTION:

    Download the 3rd-party libraries and make sure they are available at ${lib.dir}${fs}, these are available as a separate download</fail>

    <condition property="CATALINA_HOME" value="${env.CATALINA_HOME}">
      <available file="${env.CATALINA_HOME}" />
    </condition>
    <fail unless="CATALINA_HOME">Initialization aborted

  SOLUTION:

    Either...

    1. Create a file called "home.properties" in this directory with the CATALINA_HOME property:

      CATALINA_HOME=/path/to/apache-tomcat

    or...

    2. Create an environment variable CATALINA_HOME which points to Tomcat's directory.

      Ex. "export CATALINA_HOME=/path/to/apache-tomcat"
      Ex. "Using System in Control Panel set CATALINA_HOME=c:\Program Files\Apache Software Foundation\Tomcat 5.5"
    </fail>
    <fail unless="build.config.present">Initialization aborted

  SOLUTION: Make sure this directory has permissions to write files, since the build.properties file was not created at ${build.config.filename}</fail>
    <fail unless="PROPERTIES">Initialization aborted

  SOLUTION: Edit the properties file at ${build.config.filename}, make sure to uncomment the PROPERTIES parameter at the top of the file</fail>
    <!-- temporarily default locale to system locale -->
    <condition property="LOCALE.NAME" value="${SYSTEM.LANGUAGE}">
      <isset property="SYSTEM.LANGUAGE"/>
    </condition>
    <fail unless="LOCALE.NAME">Initialization aborted

  SOLUTION: Edit the properties file at ${build.config.filename}, make sure to configure the SYSTEM.LANGUAGE parameter in this file</fail>
  </target>
  
  <!-- Copy the common jars -->
  <target name="init.classpath.uptodate" unless="build.config.war">
    <mkdir dir="${CENTRIC_HOME}/WEB-INF/lib"/>
    <copy todir="${CENTRIC_HOME}/WEB-INF/lib">
      <fileset dir="${lib.dir}">
        <include name="*.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- Configure classpath as both object and a property -->
  <target name="init.classpath" depends="init.classpath.uptodate">
    <path id="cfs2.classpath">
      <fileset dir="${CATALINA_HOME}/common/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${lib.dir}">
        <include name="*.jar"/>
      </fileset>
    </path>
    <property name="CLASSPATH" refid="cfs2.classpath"/>
  </target>
  
  <!-- Prepare ant for processing -->
  <target name="init" depends="init.loadproperties,init.classpath,init.servlet4.set,init.servlet5.set"
    description="Verify system environment needed by install">
    <!-- Default properties if not otherwise specified in build.properties -->
    <property name="DEBUGLEVEL" value="none"/>
    <property name="build.config.filename" value="${base.dir}/build.properties"/>
    <property name="build.config.present" value="ERROR: UNDEFINED"/>
    <!-- Gatekeeper database -->
    <property name="GATEKEEPER.APPCODE" value=""/>
    <property name="GATEKEEPER.DBTYPE" value=""/>
    <property name="GATEKEEPER.DRIVER" value=""/>
    <property name="GATEKEEPER.URL" value=""/>
    <property name="GATEKEEPER.USER" value=""/>
    <property name="GATEKEEPER.PASSWORD" value=""/>
    <!-- Additional sites/databases -->
    <property name="SITE.APPCODE" value=""/>
    <property name="SITE.DBTYPE" value=""/>
    <property name="SITE.DRIVER" value=""/>
    <property name="SITE.URL" value=""/>
    <property name="SITE.APPEND" value=""/>
    <property name="SITE.USER" value=""/>
    <property name="SITE.PASSWORD" value=""/>
    <!-- External Servers -->
    <property name="MAILSERVER" value="127.0.0.1"/>
    <property name="FAXSERVER" value="127.0.0.1"/>
    
    <!-- Begin output -->
    <echo message="Project: ${ant.project.name}"/>
    <echo message="Date: ${date.long}"/>
    <echo message="User: ${user.name}"/>
    <echo message="System: ${os.name} ${os.arch} ${os.version}"/>
    <echo message="Ant version: ${ant.version}"/>
    <echo message="Java version: ${java.version}"/>
    <echo message=""/>
    <echo message="Source path: ${base.dir}"/>
    <echo message="Destination path: ${CENTRIC_HOME}"/>
    <echo message="Properties file: ${build.config.filename}"/>
    <echo message="File Library path: ${CENTRIC_FILELIBRARY}"/>
    <echo message="Locale: ${LOCALE.NAME}"/>

  </target>

  <target name="taskdef.upgradeDatabase" depends="init">
    <taskdef name="upgradeDatabase"
      classname="org.aspcfs.ant.tasks.UpgradeDatabaseTask">
      <classpath>
        <fileset dir="${build.lib.dir}">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
    </taskdef>
  </target>

  <target name="taskdef.jasper" depends="init">
    <taskdef name="compileJasperReport"
      classname="net.sf.jasperreports.ant.JRAntCompileTask">
      <classpath>
        <fileset dir="${build.lib.dir}">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
    </taskdef>
  </target>

  <!-- See if files are up-to-date so only new files are installed during development -->
  <target name="classes.prepare" depends="init" unless="build.config.war">
    <uptodate property="classes.uptodate">
      <srcfiles dir="${src.classes.dir}" includes="**/*.java"/>
      <mapper type="merge" to="${CENTRIC_HOME}/WEB-INF/lib/aspcfs.jar"/>
    </uptodate>
  </target>
  
  <!-- Check to see if previously compiled classes should be deleted -->
  <target name="compile.checkdelete" depends="init">
    <condition property="compile.donotdelete">
      <isset property="classes.uptodate"/>
    </condition>
    <condition property="compile.donotdelete">
      <and>
        <not>
          <isset property="classes.uptodate"/>
        </not>
        <isset property="compile.donotdelete.property"/>
      </and>
    </condition>
  </target>

  <target name="compile.delete"
    depends="init,compile.checkdelete"
    unless="compile.donotdelete">
    <!-- Get rid of any classes in the source dir that shouldn't be there -->
    <delete>
      <fileset dir="${src.classes.dir}" includes="**/*.class"/>
    </delete>
    <delete dir="${build.classes.dir}"/>
    <mkdir dir="${build.classes.dir}"/>
  </target>
  
  <!-- Compile the Java source code -->
  <target name="compile"
    description="Compile all .java source files"
    depends="init,compile.delete"
    unless="classes.uptodate">
    <!-- Compile the code -->
    <javac srcdir="${src.classes.dir}" destdir="${build.classes.dir}" verbose="off" deprecation="off"
      fork="true" memoryInitialSize="168m" memoryMaximumSize="168m">
      <classpath>
        <path refid="cfs2.classpath"/>
      </classpath>
    </javac>
  </target>
  
  <!-- Generate the .jar files -->
  <target name="jar"
    depends="init"
    unless="classes.uptodate">
    <delete dir="${build.lib.dir}"/>
    <mkdir dir="${build.lib.dir}"/>
    <!-- darkhorseventures.jar -->
    <jar jarfile="${build.lib.dir}/darkhorseventures.jar"
      basedir="${build.classes.dir}"
      includes="com/darkhorseventures/**/*.class"/>
    <!-- isavvix.jar -->
    <jar jarfile="${build.lib.dir}/isavvix.jar"
      basedir="${build.classes.dir}"
      includes="com/isavvix/**/*.class"/>
    <!-- Novacoast.jar -->
    <jar jarfile="${build.lib.dir}/Novacoast.jar"
      basedir="${build.classes.dir}"
      includes="com/Novacoast/**/*.class"/>
    <!-- zeroio-iteam.jar -->
    <jar jarfile="${build.lib.dir}/zeroio-iteam.jar"
      basedir="${build.classes.dir}"
      includes="com/zeroio/**/*.class"/>
    <!-- aspcfs.jar -->
    <jar jarfile="${build.lib.dir}/aspcfs.jar"
      basedir="${build.classes.dir}"
      includes="org/aspcfs/**/*.class"/>
    <!-- jcrontab.jar -->
    <jar jarfile="${build.lib.dir}/jcrontab.jar"
      basedir="${build.classes.dir}"
      includes="org/jcrontab/**/*.class"/>
    <!-- webdav.jar -->
    <copy todir="${build.classes.dir}/org/apache/catalina/servlets">
      <fileset dir="${src.classes.dir}/org/apache/catalina/servlets">
        <include name="LocalStrings.properties"/>
      </fileset>
    </copy>
    <jar jarfile="${build.lib.dir}/webdav.jar"
      basedir="${build.classes.dir}"
      includes="org/apache/**/*.class,org/apache/**/*.properties"/>
  </target>

  <target name="build"
    description="Create .jar files for compiled classes"
    depends="init,compile,jar">
    <mkdir dir="${build.lib.dir}"/>
  </target>
  
  <!-- Delete outdated files -->
  <target name="deploy.delete" description="Removes outdated files from web application"
      unless="build.config.war">
    <delete verbose="true">
      <fileset dir="${CENTRIC_HOME}" includesfile="${base.dir}/build.cleanup"/>
    </delete>
  </target>

  <target name="deploy.copy" unless="build.config.war">
    <!-- Copy the .jars, only if new -->
    <copy todir="${CENTRIC_HOME}/WEB-INF/lib">
      <fileset dir="${build.lib.dir}">
        <include name="*.jar"/>
      </fileset>
    </copy>
    <!-- Copy the web data, only if new -->
    <copy todir="${CENTRIC_HOME}">
      <fileset dir="${src.web.dir}/jsp">
        <include name="**"/>
      </fileset>
    </copy>
    <copy todir="${CENTRIC_HOME}">
      <fileset dir="${src.web.dir}/html">
        <include name="**"/>
      </fileset>
    </copy>
    <copy todir="${CENTRIC_HOME}">
      <fileset dir="${src.web.dir}">
        <include name="images/**"/>
        <include name="javascript/**"/>
        <include name="css/**"/>
      </fileset>
    </copy>
    <!-- Copy the configuration files -->
    <copy todir="${CENTRIC_HOME}/WEB-INF" verbose="true">
      <fileset dir="${src.web.dir}/WEB-INF">
        <include name="*.xml"/>
        <include name="*.tld"/>
        <exclude name="web.xml"/>
      </fileset>
    </copy>
    <!-- Copy the dictionary files -->
    <mkdir dir="${CENTRIC_HOME}/WEB-INF/languages"/>
    <copy todir="${CENTRIC_HOME}/WEB-INF/languages">
      <fileset dir="${src.dir}/languages">
        <include name="*.xml"/>
      </fileset>
    </copy>
    <mkdir dir="${CENTRIC_HOME}/javascript/languages"/>
    <copy todir="${CENTRIC_HOME}/javascript/languages">
      <fileset dir="${src.dir}/languages">
        <include name="*.js"/>
      </fileset>
    </copy>
    <!-- Copy the icelet files -->
    <mkdir dir="${CENTRIC_HOME}/WEB-INF/icelets"/>
    <copy todir="${CENTRIC_HOME}/WEB-INF/icelets">
      <fileset dir="${src.dir}/icelets">
        <include name="*.xml"/>
      </fileset>
    </copy>
    <!-- Copy the font files-->
    <mkdir dir="${CENTRIC_HOME}/WEB-INF/fonts"/>
    <copy todir="${CENTRIC_HOME}/WEB-INF/fonts">
      <fileset dir="${src.dir}/fonts">
        <include name="*.ttf"/>
      </fileset>
    </copy>
  </target>

  <target name="deploy.jasper.check" depends="init" unless="build.config.war">
    <uptodate property="deploy.jasper.uptodate">
      <srcfiles dir="${src.dir}/jasper_reports" includes="*.xml"/>
      <mapper type="merge" to="${CENTRIC_HOME}/WEB-INF/reports/accounts_type.jasper"/>
    </uptodate>
  </target>

  <target name="deploy.jasper.status.war" if="build.config.war">
    <property name="deploy.jasper.uptodate" value="true" />
  </target>

  <target name="deploy.jasper.status"
          depends="deploy.jasper.check,taskdef.jasper,deploy.jasper.status.war"
          unless="deploy.jasper.uptodate">
    <echo message="Installing JasperReport files"/>
    <!-- Copy the jasperreports, only if new -->
    <copy todir="${CENTRIC_HOME}/WEB-INF/reports">
      <fileset dir="${src.dir}/jasper_reports">
        <include name="*.xml"/>
      </fileset>
    </copy>
    <!-- The old .jasper file must be removed when a new .xml is copied -->
    <delete>
      <fileset dir="${CENTRIC_HOME}/WEB-INF/reports" includes="*.jasper"/>
    </delete>
    <!-- Compile the reports -->
    <compileJasperReport
      srcdir="${CENTRIC_HOME}/WEB-INF/reports"
      destdir="${CENTRIC_HOME}/WEB-INF/reports"
      compiler="net.sf.jasperreports.compilers.JRBshCompiler"/>
  </target>

  <target name="deploy.jasper" depends="deploy.jasper.status" unless="build.config.war">

  </target>

  <!-- See if there is an updated file to merge -->
  <target name="deploy.merge.prepare" unless="build.config.war">
    <!-- Generate a new CENTRIC_HOME web.xml if any of the following: -->
    <!-- 1. cvs web.xml is newer than CENTRIC_HOME web.xml -->
    <!-- 2. build.properties is newer than the installed web.xml -->
    <!-- 3. Any of the CENTRIC_HOME xml or tld files are newer than CENTRIC_HOME web.xml -->
    <condition property="deploy.merge.uptodate">
      <and>
        <available file="${CENTRIC_HOME}/WEB-INF/web.xml"/>
        <available file="${build.config.filename}"/>
        <uptodate srcfile="${src.web.dir}/WEB-INF/web.xml"
          targetfile="${CENTRIC_HOME}/WEB-INF/web.xml"/>
        <uptodate srcfile="${build.config.filename}"
          targetfile="${CENTRIC_HOME}/WEB-INF/web.xml"/>
        <uptodate targetfile="${CENTRIC_HOME}/WEB-INF/web.xml">
          <srcfiles dir="${CENTRIC_HOME}/WEB-INF" includes="*.xml,*.tld" excludes="web.xml"/>
        </uptodate>
      </and>
    </condition>
  </target>

  <target name="deploy.merge.status" if="build.config.war">
    <property name="deploy.merge.uptodate" value="true" />
  </target>

  <!-- Merge meta-data with build.properties, only if changed so reload doesn't kick in -->
  <target name="deploy.status" depends="deploy.merge.prepare, deploy.merge.status" unless="deploy.merge.uptodate">
    <echo message="Installing web.xml configuration file"/>
    <copy file="${src.web.dir}/WEB-INF/web.xml" todir="${CENTRIC_HOME}/WEB-INF" overwrite="true"/>
    <replace file="${CENTRIC_HOME}/WEB-INF/web.xml"
      token="@KEYSTORE@" value="${CENTRIC_FILELIBRARY}${fs}keystore"/>
  </target>

  <target name="deploy.merge" depends="deploy.status" unless="build.config.war">

  </target>

  <!-- Log the deployment process to the web-app folder -->
  <target name="log.deploy" depends="init.loadproperties" unless="build.config.war">
    <mkdir dir="${CENTRIC_HOME}/WEB-INF/logs"/>
    <record name="${CENTRIC_HOME}/WEB-INF/logs/deploy-${date.short}.log" append="no"/>
  </target>

  <target name="log.upgradedb" depends="init.loadproperties" unless="build.config.war">
    <mkdir dir="${CENTRIC_HOME}/WEB-INF/logs"/>
    <record name="${CENTRIC_HOME}/WEB-INF/logs/upgradedb-${date.short}.log" append="no"/>
  </target>

  <target name="log.installdb" depends="init.loadproperties" unless="build.config.war">
    <mkdir dir="${CENTRIC_HOME}/WEB-INF/logs"/>
    <record name="${CENTRIC_HOME}/WEB-INF/logs/installdb-${date.short}.log" append="no"/>
  </target>

  <!-- Check if keyfile exists -->
  <target name="keyfile.exists" depends="init" unless="build.config.war">
    <available file="${CENTRIC_FILELIBRARY}/keystore" property="keyfile.present"/>
  </target>

  <target name="keyfile.status" if="build.config.war">
    <property name="keyfile.present" value="true" />
  </target>

  <!-- Generate SSL keyfile for new system -->
  <target name="keyfile.create" depends="keyfile.exists,keyfile.status" unless="keyfile.present">
    <echo message="Self-signed SSL certificate will be placed at ${CENTRIC_FILELIBRARY}/keystore"/>
    <genkey alias="centric_crm"
      keystore="${CENTRIC_FILELIBRARY}/keystore"
      storepass="centric_crm"
      storetype="JKS"
      keyalg="RSA"
      keysize="1024"
      validity="${KEYSTORE.VALIDITY}">
      <dname>
        <param name="CN" value="${KEYSTORE.COMMONNAME}"/>
        <param name="OU" value="${KEYSTORE.ORGANIZATIONALUNIT}"/>
        <param name="O" value="${KEYSTORE.ORGANIZATION}"/>
        <param name="L" value="${KEYSTORE.CITY}"/>
        <param name="ST" value="${KEYSTORE.STATE}"/>
        <param name="C" value="${KEYSTORE.COUNTRY}"/>
      </dname>
    </genkey>
    <!-- Prepare a CSR to get signed
    keytool -certreq -keyalg RSA -alias centric_crm -file ${CENTRIC_FILELIBRARY}/domain.csr -keystore ${CENTRIC_FILELIBRARY}/keystore
    -->
    <!-- Import the signed certificates
    keytool -import -trustcacerts -alias root -file GTECyberTrustRoot.crt -keystore ${CENTRIC_FILELIBRARY}/keystore
    keytool -import -trustcacerts -alias comodo -file ComodoSecurityServicesCA.crt -keystore ${CENTRIC_FILELIBRARY}/keystore
    keytool -import -trustcacerts -alias centric_crm -file domain.crt -keystore ${CENTRIC_FILELIBRARY}/keystore
    -->
    <!-- Export the certificate for a client app to use
    keytool -export -alias centric_crm -file ${CENTRIC_FILELIBRARY}/domain.cert -keystore ${CENTRIC_FILELIBRARY}/keystore
    -->
  </target>

  <target name="keyfile" depends="keyfile.create" unless="build.config.war">

  </target>

  <!-- Copy all data to the web-app folder and finalize any items -->
  <target name="deploy"
    description="Compile, build, copy, and configure web application"
    depends="log.deploy,classes.prepare,build,keyfile,deploy.delete,deploy.copy,deploy.templates,deploy.merge,deploy.jasper,war.create">

  </target>

  <target name="dev.configure">
    <property name="compile.donotdelete.property" value="true"/>
  </target>

  <target name="dev"
    description="Deploy without deleting previously compiled source"
    depends="dev.configure,deploy">
  </target>

  <!-- Generate .java/.class files out of the web-app .jsps -->
  <target name="test" depends="init,deploy"
    description="Compile deployed JSPs to check for errors">
    <delete dir="${build.jsp.dir}"/>
    <delete dir="${build.jspclasses.dir}"/>
    <mkdir dir="${build.jsp.dir}"/>
    <java classname="org.apache.jasper.JspC" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <pathelement location="${env.ANT_HOME}/lib/ant.jar"/>
      </classpath>
      <arg line="-v -d ${build.jsp.dir} -p org.apache.jsp
                -uriroot ${CENTRIC_HOME}
                -webinc ${build.jsp.dir}/webinc.xml
                -webapp ${CENTRIC_HOME} "/>
    </java>
    <mkdir dir="${build.jspclasses.dir}"/>
    <javac srcdir="${build.jsp.dir}" destdir="${build.jspclasses.dir}"
      verbose="off" deprecation="on">
      <classpath>
        <path refid="cfs2.classpath"/>
        <pathelement location="${CENTRIC_HOME}/WEB-INF/lib/darkhorseventures.jar"/>
        <pathelement location="${CENTRIC_HOME}/WEB-INF/lib/aspcfs.jar"/>
        <pathelement location="${CENTRIC_HOME}/WEB-INF/lib/zeroio-iteam.jar"/>
        <pathelement location="${CENTRIC_HOME}/WEB-INF/lib/isavvix.jar"/>
        <pathelement location="${CENTRIC_HOME}/WEB-INF/lib/Novacoast.jar"/>
        <pathelement location="${CENTRIC_HOME}/WEB-INF/lib/jcrontab.jar"/>
        <pathelement location="${CENTRIC_HOME}/WEB-INF/lib/webdav.jar"/>
      </classpath>
      <include name="**/*.java"/>
      <exclude name="**/*finclude_jsp.java"/>
      <exclude name="**/*fmenu_jsp.java"/>
      <exclude name="**/*frelationships_*fview2_jsp.java"/>
    </javac>
  </target>

  <!-- Create a WAR -->
  <target name="war.create"
    depends="classes.prepare,build,dist.archive">
  </target>

  <target name="war.setup">
    <property name="build.config.war" value="true" />
  </target>

  <target name="war"
    description="Compile, build, and generate web archive"
    depends="war.setup,war.create">

  </target>

  <target name="dist.archive" depends="taskdef.jasper" if="build.config.war">
    <delete dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <!-- Copy the common .jars -->
    <copy todir="${dist.dir}/cfs/WEB-INF/lib">
      <fileset dir="${lib.dir}">
        <include name="*.jar"/>
      </fileset>
    </copy>
    <!-- Copy the .jars -->
    <copy todir="${dist.dir}/cfs/WEB-INF/lib">
      <fileset dir="${build.lib.dir}">
        <include name="*.jar"/>
        <exclude name="aspcfs.jar"/>
      </fileset>
    </copy>
    <!-- aspcfs.jar -->
    <jar jarfile="${dist.dir}/cfs/WEB-INF/lib/aspcfs.jar"
      basedir="${build.classes.dir}"
      includes="org/aspcfs/**/*.class"
      />
    <!-- Copy the web data -->
    <copy todir="${dist.dir}/cfs">
      <fileset dir="${src.web.dir}/jsp">
        <include name="**"/>
      </fileset>
    </copy>
    <copy todir="${dist.dir}/cfs">
      <fileset dir="${src.web.dir}/html">
        <include name="**"/>
      </fileset>
    </copy>
    <copy todir="${dist.dir}/cfs">
      <fileset dir="${src.web.dir}">
        <include name="images/**"/>
        <include name="javascript/**"/>
        <include name="css/**"/>
      </fileset>
    </copy>
    <!-- Copy the configuration files -->
    <copy todir="${dist.dir}/cfs/WEB-INF" verbose="true">
      <fileset dir="${src.web.dir}/WEB-INF">
        <include name="*.xml"/>
        <include name="*.tld"/>
        <exclude name="web.xml"/>
      </fileset>
    </copy>
    <!-- Copy the default preference files -->
    <copy todir="${dist.dir}/cfs/WEB-INF/setup" verbose="true">
      <fileset dir="${pref.dir}/cfs/system">
        <include name="*.xml"/>
      </fileset>
    </copy>
    <!-- Copy the database files (PostgreSQL) -->
    <copy file="${src.sql.dir}/postgresql/distribution/postgresql.sql" todir="${dist.dir}/cfs/WEB-INF/setup"/>
    <copy todir="${dist.dir}/cfs/WEB-INF/setup">
      <fileset dir="${src.sql.dir}/postgresql/distribution">
        <include name="postgresql_*.sql"/>
      </fileset>
    </copy>
    <!-- Copy the database files (MSSQL) -->
    <copy file="${src.sql.dir}/mssql/distribution/mssql.sql" todir="${dist.dir}/cfs/WEB-INF/setup"/>
    <copy todir="${dist.dir}/cfs/WEB-INF/setup">
      <fileset dir="${src.sql.dir}/mssql/distribution">
        <include name="mssql_*.sql"/>
      </fileset>
    </copy>
    <!-- Copy the database files (Firebird SQL) -->
    <!--
    <copy file="${src.sql.dir}/firebird/distribution/firebird.zip" todir="${dist.dir}/cfs/WEB-INF/setup"/>
    <copy todir="${dist.dir}/cfs/WEB-INF/setup">
      <fileset dir="${src.sql.dir}/firebird/distribution">
        <include name="firebird_*.sql"/>
      </fileset>
    </copy>
    -->
    <!-- Copy the database files (Oracle) -->
    <!--
    <copy file="${src.sql.dir}/oracle/distribution/oracle.sql" todir="${dist.dir}/cfs/WEB-INF/setup"/>
    <copy todir="${dist.dir}/cfs/WEB-INF/setup">
      <fileset dir="${src.sql.dir}/oracle/distribution">
        <include name="oracle_*.sql"/>
      </fileset>
    </copy>
    -->
    <!-- Copy the database files (DaffodilDB) -->
    <copy file="${src.sql.dir}/daffodildb/distribution/daffodildb.zip" todir="${dist.dir}/cfs/WEB-INF/setup"/>
    <copy todir="${dist.dir}/cfs/WEB-INF/setup">
      <fileset dir="${src.sql.dir}/daffodildb/distribution">
        <include name="daffodildb_*.sql"/>
      </fileset>
    </copy>
    <!-- Copy the database upgrade files -->
    <copy todir="${dist.dir}/cfs/WEB-INF/setup">
      <fileset dir="${src.sql.dir}/upgrade">
        <include name="*.bsh"/>
      </fileset>
    </copy>
    <!-- Copy the database install files -->
    <copy todir="${dist.dir}/cfs/WEB-INF/setup">
      <fileset dir="${src.sql.dir}/init">
        <include name="*.bsh"/>
      </fileset>
    </copy>
    <copy todir="${dist.dir}/cfs/WEB-INF/setup">
      <fileset dir="${src.sql.dir}/init">
        <include name="*.xml"/>
      </fileset>
    </copy>
    <copy file="${src.sql.dir}/init/help.xml"
      todir="${dist.dir}/cfs/WEB-INF/setup"/>
    <!-- Copy Icelets -->
    <copy todir="${dist.dir}/cfs/WEB-INF/icelets" verbose="true">
      <fileset dir="${src.dir}/icelets">
        <include name="*.xml"/>
      </fileset>
    </copy>
    <!-- Copy the .zipped portal templates -->
    <mkdir dir="${dist.dir}/cfs/WEB-INF/portal_templates"/>
    <copy todir="${dist.dir}/cfs/WEB-INF/portal_templates">
      <fileset dir="${CENTRIC_HOME}/WEB-INF/portal_templates">
        <include name="**/*"/>
      </fileset>
    </copy>
    <!-- Copy and compile the reports -->
    <mkdir dir="${dist.dir}/cfs/WEB-INF/reports"/>
    <copy todir="${dist.dir}/cfs/WEB-INF/reports">
      <fileset dir="${src.dir}/jasper_reports">
        <include name="*.xml"/>
      </fileset>
    </copy>
    <compileJasperReport
      srcdir="${dist.dir}/cfs/WEB-INF/reports"
      destdir="${dist.dir}/cfs/WEB-INF/reports"
      compiler="net.sf.jasperreports.compilers.JRBshCompiler"/>
    <delete>
      <fileset dir="${dist.dir}/cfs/WEB-INF/reports" includes="*.xml"/>
    </delete>
    <!-- Copy the language files -->
    <mkdir dir="${dist.dir}/cfs/WEB-INF/languages"/>
    <copy todir="${dist.dir}/cfs/WEB-INF/languages">
      <fileset dir="${src.dir}/languages">
        <include name="*.xml"/>
      </fileset>
    </copy>
    <mkdir dir="${dist.dir}/cfs/javascript/languages"/>
    <copy todir="${dist.dir}/cfs/javascript/languages">
      <fileset dir="${src.dir}/languages">
        <include name="*.js"/>
      </fileset>
    </copy>
    <!-- Copy the fonts -->
    <mkdir dir="${dist.dir}/cfs/WEB-INF/fonts"/>
    <copy todir="${dist.dir}/cfs/WEB-INF/fonts">
      <fileset dir="${src.dir}/fonts">
        <include name="*.ttf"/>
      </fileset>
    </copy>
    <!-- Archive the folder -->
    <war destfile="${dist.dir}/centric.war"
      webxml="${src.web.dir}/WEB-INF/web.xml"
      basedir="${dist.dir}/cfs"
      compress="true"
      manifest="${pref.dir}/cfs/war/MANIFEST.MF"
      />
    <!-- Create the distributable .zip file -->
    <zip destfile="${dist.dir}/centric_war.zip">
      <fileset dir="${doc.dir}" includes="Binary*EULA.rtf"/>
      <fileset dir="${doc.dir}" includes="CRM*Installation*and*Setup.pdf"/>
      <fileset dir="${base.dir}" includes="CHANGES.txt"/>
      <fileset dir="${dist.dir}" includes="centric.war"/>
    </zip>
    <!-- Cleanup files -->
    <delete dir="${dist.dir}/cfs"/>
    <echo message=".war file created: ${dist.dir}${fs}centric.war"/>
  </target>
  
  <!-- Create sourcecode distribution -->
  <target name="source"
    description="Compile, build, and generate source archive"
    depends="deploy,source.archive">
  </target>

  <target name="source.archive">
    <property name="zip.dir" value="centric_crm"/>
    <delete dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <!-- Update the build number -->
    <copy file="${base.dir}/README.txt" todir="${dist.dir}" verbose="true"/>
    <copy file="${base.dir}/pref/cfs/source/readme-libraries.txt" todir="${dist.dir}" verbose="true"/>
    <buildnumber file="source.number"/>
    <replace file="${dist.dir}/README.txt"
      token="@BUILD.NUMBER@" value="${build.number}"/>
    <replace file="${dist.dir}/README.txt"
      token="@BUILD.DATE@" value="${date.long}"/>
    <replace file="${dist.dir}/readme-libraries.txt"
      token="@BUILD.NUMBER@" value="${build.number}"/>
    <replace file="${dist.dir}/readme-libraries.txt"
      token="@BUILD.DATE@" value="${date.long}"/>
    <mkdir dir="${dist.dir}/files/src"/>
    <copy todir="${dist.dir}/files">
      <fileset dir="${base.dir}">
        <!-- src/java -->
        <include name="src/java/**"/>
        <exclude name="src/java/org/aspcfs/modules/industry/spirit/**"/>
        <!-- src/web/jsp -->
        <include name="src/web/jsp/**"/>
        <!-- master.properties -->
        <include name="master.properties"/>
        <include name="home.properties.example"/>
      </fileset>
    </copy>
    <!-- Create the distributable .zip file -->
    <zip destfile="${dist.dir}/${zip.dir}_source.zip">
      <!-- main directory -->
      <zipfileset dir="${dist.dir}" includes="README.txt" prefix="${zip.dir}"/>
      <zipfileset dir="${base.dir}" includes="LICENSE.txt" prefix="${zip.dir}"/>
      <zipfileset dir="${base.dir}" includes="build.xml" prefix="${zip.dir}"/>
      <zipfileset dir="${base.dir}" includes="build.cleanup" prefix="${zip.dir}"/>
      <zipfileset dir="${dist.dir}/files" includes="master.properties" prefix="${zip.dir}"/>
      <!-- sub directories: prefs -->
      <zipfileset dir="pref/jedit" prefix="${zip.dir}/pref/jedit"/>
      <zipfileset dir="pref/cfs/notifier" prefix="${zip.dir}/pref/cfs/notifier"/>
      <zipfileset dir="pref/cfs/system" prefix="${zip.dir}/pref/cfs/system"/>
      <zipfileset dir="pref/cfs/transfer" prefix="${zip.dir}/pref/cfs/transfer"/>
      <zipfileset dir="pref/cfs/source" includes="MANIFEST.MF" fullpath="${zip.dir}/pref/cfs/war/MANIFEST.MF"/>
      <!-- sub directories: src/jasper_reports -->
      <zipfileset dir="src/jasper_reports" prefix="${zip.dir}/src/jasper_reports"/>
      <!-- sub directories: src/java -->
      <zipfileset
        dir="${dist.dir}/files/src/java"
        prefix="${zip.dir}/src/java"/>
      <!-- sub directories: src/sql -->
      <zipfileset
        dir="src/sql/postgresql"
        includes="new_*.sql"
        prefix="${zip.dir}/src/sql/postgresql"/>
      <zipfileset
        dir="src/sql/postgresql/upgrade"
        includes="*.sql,*.txt"
        prefix="${zip.dir}/src/sql/postgresql/upgrade"/>
      <zipfileset
        dir="src/sql/mssql"
        includes="new_*.sql"
        prefix="${zip.dir}/src/sql/mssql"/>
      <zipfileset
        dir="src/sql/mssql/upgrade"
        includes="*.sql,*.txt"
        prefix="${zip.dir}/src/sql/mssql/upgrade"/>
      <zipfileset
        dir="src/sql/firebird"
        includes="new_*.sql"
        prefix="${zip.dir}/src/sql/firebird"/>
      <zipfileset
        dir="src/sql/firebird/upgrade"
        includes="*.sql,*.txt"
        prefix="${zip.dir}/src/sql/firebird/upgrade"/>
      <zipfileset
        dir="src/sql/oracle"
        includes="new_*.sql"
        prefix="${zip.dir}/src/sql/oracle"/>
      <!--
      <zipfileset
        dir="src/sql/oracle/upgrade"
        includes="*.sql,*.txt"
        prefix="${zip.dir}/src/sql/oracle/upgrade"/>
      -->
      <zipfileset
        dir="src/sql/daffodildb"
        includes="new_*.sql"
        prefix="${zip.dir}/src/sql/daffodildb"/>
      <zipfileset
        dir="src/sql/daffodildb/upgrade"
        includes="*.sql,*.txt"
        prefix="${zip.dir}/src/sql/daffodildb/upgrade"/>
      <zipfileset
        dir="src/sql/init"
        includes="*.sql, *.xml, *.bsh"
        prefix="${zip.dir}/src/sql/init"/>
      <zipfileset
        dir="src/sql/upgrade"
        includes="*.bsh"
        prefix="${zip.dir}/src/sql/upgrade"/>
      <!-- sub directories: src/web/images -->
      <zipfileset
        dir="src/web/images"
        prefix="${zip.dir}/src/web/images"/>
      <!-- sub directories: src/web/WEB-INF -->
      <zipfileset
        dir="src/web/WEB-INF"
        excludes="keystore"
        prefix="${zip.dir}/src/web/WEB-INF"/>
      <!-- sub directories: src/web/css -->
      <zipfileset
        dir="src/web/css"
        prefix="${zip.dir}/src/web/css"/>
      <!-- sub directories: src/web/html -->
      <zipfileset
        dir="src/web/html"
        prefix="${zip.dir}/src/web/html"/>
      <!-- sub directories: src/web/javascript -->
      <zipfileset
        dir="src/web/javascript"
        prefix="${zip.dir}/src/web/javascript"/>
      <!-- sub directories: src/web/jsp -->
      <zipfileset
        dir="${dist.dir}/files/src/web"
        prefix="${zip.dir}/src/web"/>
      <!-- language files -->
      <zipfileset
        dir="src/languages"
        prefix="${zip.dir}/src/languages"/>
      <zipfileset
        dir="src/fonts"
        prefix="${zip.dir}/src/fonts"/>
    </zip>
    <!-- Libraries -->
    <zip destfile="${dist.dir}/${zip.dir}_libraries.zip">
      <zipfileset
        dir="${dist.dir}"
        includes="readme-libraries.txt"
        fullpath="${zip.dir}/readme-libraries.txt"
        />
      <zipfileset
        dir="lib"
        excludes="oracle*.jar"
        prefix="${zip.dir}/lib"/>
    </zip>
    <!-- delete temporary files -->
    <delete>
      <fileset dir="${dist.dir}" includes="*.txt"/>
    </delete>
    <delete dir="${dist.dir}/files"/>
  </target>

  <!-- Create tools distribution -->
  <target name="tools"
    description="Compile, build, and generate tools archive"
    depends="deploy,tools.archive">
  </target>

  <target name="tools.archive">
    <property name="zip.dir" value="centric_crm_tools"/>
    <property name="tools.version" value="4.0"/>
    <delete dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <!-- Update the build number -->
    <copy file="${base.dir}/pref/cfs/tools/readme.txt" todir="${dist.dir}" verbose="true"/>
    <buildnumber file="tools.number"/>
    <replace file="${dist.dir}/readme.txt"
      token="@BUILD.NUMBER@" value="${build.number}"/>
    <replace file="${dist.dir}/readme.txt"
      token="@BUILD.DATE@" value="${date.long}"/>
    <copy file="${base.dir}/pref/cfs/transfer/import-mappings.xml" todir="${dist.dir}" verbose="true"/>
    <!-- Ignore certain code when zipping -->
    <mkdir dir="${dist.dir}/files/src"/>
    <copy todir="${dist.dir}/files" verbose="true">
      <fileset dir="${base.dir}">
        <!-- src/java -->
        <include name="src/java/org/aspcfs/utils/CRMConnection.java"/>
        <include name="src/java/org/aspcfs/apps/transfer/writer/cfshttpxmlwriter/CFSHttpXMLWriter.java"/>
        <include name="src/java/org/aspcfs/apps/transfer/DataImportHandler.java"/>
        <include name="src/java/org/aspcfs/apps/transfer/Transfer.java"/>
        <include name="src/java/org/aspcfs/utils/XMLUtils.java"/>
        <include name="src/java/org/aspcfs/utils/HTTPUtils.java"/>
        <include name="src/java/org/aspcfs/utils/HttpsTrustManager.java"/>
        <include name="src/java/org/aspcfs/utils/HttpsHostnameVerifier.java"/>
        <include name="src/java/org/aspcfs/utils/HttpsHostnameVerifierDeprecated.java"/>
        <include name="src/java/org/aspcfs/utils/StringUtils.java"/>
        <include name="src/java/org/aspcfs/utils/ObjectUtils.java"/>
        <include name="src/java/org/aspcfs/apps/transfer/DataRecord.java"/>
        <include name="src/java/org/aspcfs/apps/transfer/DataField.java"/>
        <include name="src/java/org/aspcfs/apps/transfer/DataWriter.java"/>
        <include name="src/java/org/aspcfs/apps/transfer/DataReader.java"/>
      </fileset>
    </copy>
    <jar jarfile="${dist.dir}/${zip.dir}-${tools.version}.jar"
          basedir="${dist.dir}/files/src/java"/>
    <!-- Create the distributable .zip file -->
    <zip destfile="${dist.dir}/${zip.dir}.zip">
      <!-- main directory -->
      <zipfileset dir="${dist.dir}" includes="readme.txt" prefix="${zip.dir}"/>
      <zipfileset dir="${dist.dir}" includes="import-mappings.xml" prefix="${zip.dir}"/>
      <zipfileset dir="${dist.dir}" includes="${zip.dir}-${tools.version}.jar" prefix="${zip.dir}"/>
    </zip>
    <!-- delete temporary files -->
    <delete>
      <fileset dir="${dist.dir}" includes="*.txt"/>
    </delete>
    <delete dir="${dist.dir}/files"/>
  </target>

  <!-- Remove the build folder -->
  <target name="clean"
    description="Delete the temporary build folder used by the install"
    depends="init">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

  <!-- References to development databases -->
  <target name="installgk"
          depends="init,installgk.execute,install.prepare,installgk.database"
    description="Gatekeeper database ">
  </target>

  <!-- force execute -->
  <target name="installgk.execute">
    <property name="EXECUTE_GK" value="true" />
    <property name="DATABASE.NAME" value="${GATEKEEPER.URL}" />
  </target>

  <!-- execute if using a single development database -->
  <target name="installgk.execute.check" unless="WEBSERVER.ASPMODE">
    <property name="EXECUTE_GK" value="true" />
  </target>

  <target name="installgk.database" depends="init,install.prepare" if="EXECUTE_GK"
    description="Create tables for gatekeeper database">
    <echo message="Initializing schema..."/>
    <sql
      driver="${GATEKEEPER.DRIVER}"
      url="${GATEKEEPER.URL}"
      userid="${GATEKEEPER.USER}"
      password="${GATEKEEPER.PASSWORD}">
      <classpath>
        <path refid="cfs2.classpath"/>
      </classpath>
      <transaction src="${src.sql.dir}/${GATEKEEPER.DBTYPE}/new_gatekeeper.sql"/>
    </sql>
  </target>

  <target name="install.gk" depends="installgk.execute.check,installgk.database" if="EXECUTE_GK">
    <property name="INSTALL.NEXT_ID" value="1"/>
  </target>

  <target name="installgk.abortOnDB">
    <condition property="ABORT">
      <equals arg1="${GATEKEEPER.DBTYPE}" arg2="daffodildb" casesensitive="false" trim="true"/>
    </condition>
    <fail if="ABORT">Step of gatekeeper installation complete, now execute the next installgk# script.</fail>
  </target>

  <target name="install.prepare.dbname" unless="DATABASE.NAME">
    <!-- Ask for the database name -->
    <input message="Enter database name: " addproperty="DATABASE.NAME"/>
    <!-- Display all information about database here, except password -->
    <echo message="Driver: ${SITE.DRIVER}"/>
    <echo message="URL: ${SITE.URL}${DATABASE.NAME}${SITE.APPEND}"/>
    <echo message="Username: ${SITE.USER}"/>
  </target>
  
  <!-- Ask about gatekeeper record -->
  <target name="install.gatekeeper.init" depends="init" if="WEBSERVER.ASPMODE">
    <input message="Add a gatekeeper site record? "
      validargs="y,n"
      addproperty="SKIP.GATEKEEPER"/>
    <condition property="DATABASE.DO_GATEKEEPER">
      <equals arg1="y" arg2="${SKIP.GATEKEEPER}"/>
    </condition>
  </target>

  <!-- Prepare files for any database type -->
  <target name="install.prepare.init" depends="init,install.prepare.dbname">
    <!-- Verify database can be overwritten -->
    <input message="The database '${DATABASE.NAME}' will be modified and must already exist, continue? "
      validargs="y,n"
      addproperty="DATABASE.DELETE"/>
    <condition property="ABORT">
      <equals arg1="n" arg2="${DATABASE.DELETE}"/>
    </condition>
    <fail if="ABORT">Build aborted by user.</fail>
    <!-- Determine the database to execute the compatible tasks -->
    <!-- Copy template files to be used -->
    <delete dir="${build.sql.dir}" failonerror="false"/>
    <mkdir dir="${build.sql.dir}"/>
    <copy todir="${build.sql.dir}">
      <fileset dir="${src.sql.dir}/init">
        <include name="*.sql"/>
      </fileset>
    </copy>
  </target>
  
  <target name="install.abortOnDB">
    <condition property="ABORT">
      <equals arg1="${SITE.DBTYPE}" arg2="daffodildb" casesensitive="false" trim="true"/>
    </condition>
    <fail if="ABORT">This database type requires additional ant installdb commands.

  SOLUTION: Now execute "ant installdb${INSTALL.NEXT_ID}"</fail>
  </target>

  <target name="install.prepare" depends="install.prepare.init">
    <echo message="SQL files prepared for database type: ${SITE.DBTYPE}"/>
  </target>

  <target name="install.database" depends="init,install.prepare">
    <property name="INSTALL.NEXT_ID" value="2"/>
    <echo message="Building database"/>
    <!-- Create database and initialize data -->
    <sql
      driver="${SITE.DRIVER}"
      url="${SITE.URL}${DATABASE.NAME}${SITE.APPEND}"
      userid="${SITE.USER}"
      password="${SITE.PASSWORD}">
      <classpath>
        <path refid="cfs2.classpath"/>
      </classpath>
      <!-- base data -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_cdb.sql"/>
      <!-- opportunities -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_opportunity.sql"/>
      <!-- project management -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_project.sql"/>
      <!-- product catalog -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_product.sql"/>
      <!-- service contracts and assets -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_service_contract.sql"/>
      <!-- tickets -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_tms.sql"/>
      <!-- quotes, orders -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_quote.sql"/>
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_order.sql"/>
      <!-- custom fields -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_custom_field.sql"/>
      <!-- communications manager -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_campaign.sql"/>
      <!-- help -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_help.sql"/>
      <!-- synchronization api -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_sync.sql"/>
      <!-- autoguide module -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_autoguide.sql"/>
      <!--
      <transaction src="${build.sql.dir}/autoguide.sql"/>
      -->
      <!-- revenue manager -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_revenue.sql"/>
      <!-- task management -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_task.sql"/>
      <!-- document management -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_documents.sql"/>
      <!-- framework data -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_workflow.sql"/>
      <!-- additional fields -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_tms_append_fields.sql"/>
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_quote_adjustment.sql" />
      <!-- contact and account history -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_history.sql" />
      <!-- action plans -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_actionplan.sql" />
      <!--knowledge base-->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_knowledgebase.sql" />
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_netapp.sql" />
      <!-- web site -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_website.sql" />
      </sql>
    <delete dir="${build.sql.dir}" failonerror="false"/>
  </target>

  <!-- Insert required default data -->
  <target name="install.system" depends="init,install.prepare,taskdef.upgradeDatabase">
    <property name="INSTALL.NEXT_ID" value="3"/>
    <upgradeDatabase
      sitecode="${SITE.APPCODE}"
      driver="${SITE.DRIVER}"
      url="${SITE.URL}${DATABASE.NAME}${SITE.APPEND}"
      user="${SITE.USER}"
      password="${SITE.PASSWORD}"
      servletJar="${servletJar}"
      fileLibraryPath="${CENTRIC_FILELIBRARY}"
      baseFile="${src.sql.dir}${fs}init${fs}database.bsh"
      specificDatabase="${DATABASE.NAME}">
    </upgradeDatabase>
    <upgradeDatabase
      sitecode="${SITE.APPCODE}"
      driver="${SITE.DRIVER}"
      url="${SITE.URL}${DATABASE.NAME}${SITE.APPEND}"
      user="${SITE.USER}"
      password="${SITE.PASSWORD}"
      servletJar="${servletJar}"
      fileLibraryPath="${CENTRIC_FILELIBRARY}"
      baseFile="${src.sql.dir}${fs}init${fs}sync.bsh"
      specificDatabase="${DATABASE.NAME}">
    </upgradeDatabase>
  </target>

  <!-- Install permissions -->
  <target name="install.permissions" depends="init,install.prepare">
    <echo message="Process file: ${src.sql.dir}${fs}init${fs}permissions_${LOCALE.NAME}.xml"/>
    <java classname="org.aspcfs.apps.transfer.Transfer" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${build.lib.dir}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
      <sysproperty key="processConfigFile" value="${src.sql.dir}${fs}init${fs}permissions_${LOCALE.NAME}.xml"/>
      <sysproperty key="driver" value="${SITE.DRIVER}"/>
      <sysproperty key="url" value="${SITE.URL}${DATABASE.NAME}${SITE.APPEND}"/>
      <sysproperty key="user" value="${SITE.USER}"/>
      <sysproperty key="pass" value="${SITE.PASSWORD}"/>
      <arg value="${src.sql.dir}${fs}init${fs}permissions-dataimport.xml"/>
    </java>
  </target>
  
  
  <!-- Upgrade help contents by deleting all help and then inserting -->
  <target name="upgradedb.help" depends="init,install.prepare,install.deletehelp,install.help"/>
  
  <!-- Upgrade help contents by deleting all help and then inserting -->
  <target name="install.deletehelp" depends="init,install.prepare">
    <echo message="Deleting existing help contents..."/>
    <!-- Delete the old help -->
    <sql
      driver="${SITE.DRIVER}"
      url="${SITE.URL}${DATABASE.NAME}${SITE.APPEND}"
      userid="${SITE.USER}"
      password="${SITE.PASSWORD}">
      <classpath>
        <path refid="cfs2.classpath"/>
      </classpath>
      <transaction>DROP TABLE help_tips</transaction>
      <transaction>DROP TABLE help_notes</transaction>
      <transaction>DROP TABLE help_business_rules</transaction>
      <transaction>DROP TABLE help_faqs</transaction>
      <transaction>DROP TABLE help_related_links</transaction>
      <transaction>DROP TABLE help_features</transaction>
      <transaction>DROP TABLE lookup_help_features</transaction>
      <transaction>DROP TABLE help_tableofcontentitem_links</transaction>
      <transaction>DROP TABLE help_tableof_contents</transaction>
      <transaction>DROP TABLE help_contents</transaction>
      <transaction>DROP TABLE help_module</transaction>
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_help.sql"/>
    </sql>
  </target>
  
  <!-- Install help contents into blank database -->
  <target name="install.help" depends="init,install.prepare">
    <echo message="Installing help contents from: ${src.sql.dir}${fs}init${fs}help.xml"/>
    <java classname="org.aspcfs.apps.help.ImportHelp" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${build.lib.dir}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
      <arg value="${src.sql.dir}${fs}init${fs}help.xml"/>
      <arg value="${SITE.DRIVER}"/>
      <arg value="${SITE.URL}${DATABASE.NAME}${SITE.APPEND}"/>
      <arg value="${SITE.USER}"/>
      <arg value="${SITE.PASSWORD}"/>
    </java>
  </target>

  <target name="install.lookup" depends="init,install.prepare.dbname,install.prepare">
    <echo message="Installing lookuplists: lookuplists_${LOCALE.NAME}.xml"/>
    <java classname="org.aspcfs.apps.lookuplists.ImportLookupLists" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${build.lib.dir}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
      <arg value="${pref.dir}${fs}cfs${fs}system${fs}lookuplists_${LOCALE.NAME}.xml"/>
      <arg value="${SITE.DRIVER}"/>
      <arg value="${SITE.URL}${DATABASE.NAME}${SITE.APPEND}"/>
      <arg value="${SITE.USER}"/>
      <arg value="${SITE.PASSWORD}"/>
    </java>
  </target>

  <target name="deploy.templates" depends="init">
    <echo message="Deploying Portal Templates"/>
    <java classname="org.aspcfs.apps.icelets.ExportPortalTemplates" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${build.lib.dir}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
      <arg value="${src.dir}"/>
      <arg value="${CENTRIC_HOME}"/>
    </java>
  </target>

  <target name="install.icelets" depends="init,install.prepare.dbname">
    <echo message="Installing Icelets: icelet_${LOCALE.NAME}.xml"/>
    <java classname="org.aspcfs.apps.icelets.ImportIcelets" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${build.lib.dir}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
      <arg value="${src.dir}${fs}icelets${fs}icelet_${LOCALE.NAME}.xml"/>
      <arg value="${SITE.DRIVER}"/>
      <arg value="${SITE.URL}${DATABASE.NAME}${SITE.APPEND}"/>
      <arg value="${SITE.USER}"/>
      <arg value="${SITE.PASSWORD}"/>
    </java>
  </target>

  <target name="install.website" depends="init,install.prepare.dbname">
    <echo message="Importing Website: custom.zip"/>
    <java classname="org.aspcfs.apps.icelets.ImportWebsite" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${build.lib.dir}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
      <arg value="${CENTRIC_HOME}${fs}WEB-INF${fs}portal_templates${fs}${LOCALE.NAME}${fs}custom.zip"/>
      <arg value="${CENTRIC_HOME}"/>
      <arg value="${SITE.DRIVER}"/>
      <arg value="${SITE.URL}${DATABASE.NAME}${SITE.APPEND}"/>
      <arg value="${SITE.USER}"/>
      <arg value="${SITE.PASSWORD}"/>
    </java>
  </target>

  <target name="export.website" depends="init,install.prepare.dbname">
    <input message="Enter site ID: " addproperty="SITE_ID"/>
    <echo message="Exporting Website: website.zip"/>
    <java classname="org.aspcfs.apps.icelets.ExportWebsite" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${build.lib.dir}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
      <arg value="${SITE_ID}"/>
      <arg value="${CENTRIC_HOME}"/>
      <arg value="${SITE.DRIVER}"/>
      <arg value="${SITE.URL}${DATABASE.NAME}${SITE.APPEND}"/>
      <arg value="${SITE.USER}"/>
      <arg value="${SITE.PASSWORD}"/>
    </java>
  </target>

  <!-- Add a site record to the sites table -->
  <target name="install.addsite" depends="init,install.prepare.dbname,install.gatekeeper.init,taskdef.upgradeDatabase" if="DATABASE.DO_GATEKEEPER">
    <input message="Please enter the virtual host URL for this site, ex &lt;site&gt;.aspcfs.com or 127.0.0.1: "
      addproperty="SITE.VIRTUAL_HOST"/>
    <input message="Enable site?"
      addproperty="SITE.CRON"
      validargs="y,n"/>
    <upgradeDatabase
      sitecode="${SITE.APPCODE}"
      driver="${GATEKEEPER.DRIVER}"
      url="${GATEKEEPER.URL}"
      user="${GATEKEEPER.USER}"
      password="${GATEKEEPER.PASSWORD}"
      servletJar="${servletJar}"
      fileLibraryPath="${CENTRIC_FILELIBRARY}"
      baseFile="${src.sql.dir}${fs}init${fs}addsite_gk.bsh"
      params="APPCODE=${SITE.APPCODE}|VIRTUAL_HOST=${SITE.VIRTUAL_HOST}|DATABASE_URL=${SITE.URL}${DATABASE.NAME}${SITE.APPEND}|DATABASE_NAME=${DATABASE.NAME}|DATABASE_USER=${SITE.USER}|DATABASE_PASSWORD=${SITE.PASSWORD}|DATABASE_DRIVER=${SITE.DRIVER}|CRON=${SITE.CRON}">
    </upgradeDatabase>
  </target>

  <!-- Copy the default .XML preferences for this system -->
  <target name="install.copyprefs" depends="init,install.prepare.dbname,taskdef.upgradeDatabase,taskdef.jasper">
    <mkdir dir="${CENTRIC_FILELIBRARY}/${DATABASE.NAME}"/>
    <copy todir="${CENTRIC_FILELIBRARY}/${DATABASE.NAME}">
      <fileset dir="${pref.dir}/cfs/system">
        <include name="*.xml"/>
      </fileset>
    </copy>
    <!-- Install the workflow.xml to the database -->
    <upgradeDatabase
      sitecode="${SITE.APPCODE}"
      driver="${SITE.DRIVER}"
      url="${SITE.URL}${DATABASE.NAME}${SITE.APPEND}"
      user="${SITE.USER}"
      password="${SITE.PASSWORD}"
      servletJar="${servletJar}"
      fileLibraryPath="${CENTRIC_FILELIBRARY}"
      baseFile="${src.sql.dir}${fs}init${fs}workflow.bsh"
      specificDatabase="${DATABASE.NAME}"
      locale="${LOCALE.NAME}">
    </upgradeDatabase>
  </target>
  <!-- Delete the preferences from this system -->
  <target name="install.deleteprefs" depends="init,install.prepare.dbname,taskdef.upgradeDatabase,taskdef.jasper">
    <!-- Delete the workflow from the database -->
    <upgradeDatabase
      sitecode="${SITE.APPCODE}"
      driver="${SITE.DRIVER}"
      url="${SITE.URL}${DATABASE.NAME}${SITE.APPEND}"
      user="${SITE.USER}"
      password="${SITE.PASSWORD}"
      servletJar="${servletJar}"
      fileLibraryPath="${CENTRIC_FILELIBRARY}"
      baseFile="${src.sql.dir}${fs}init${fs}workflow-delete.bsh"
      specificDatabase="${DATABASE.NAME}">
    </upgradeDatabase>
  </target>

  <!-- Installs a new database -->
  <!-- Split into multiple calls due to embedded database locking -->
  <target name="installdb" depends="init,log.installdb,install.gk,install.abortOnDB,install.database,install.abortOnDB,install.system,install.lookup,install.permissions,install.help,install.icelets,install.copyprefs,install.addsite"
    description="Create tables, insert base records and permissions into new database, copy XML files">
  </target>
  <target name="installdb1" depends="init,log.installdb,install.database,install.abortOnDB"
    description="Create tables, insert base records and permissions into new database, copy XML files">
  </target>
  <target name="installdb2" depends="init,log.installdb,install.prepare.dbname,install.system,install.abortOnDB"
    description="Create tables, insert base records and permissions into new database, copy XML files">
  </target>
  <target name="installdb3" depends="init,log.installdb,install.prepare.dbname,install.lookup,install.permissions,install.help,install.copyprefs,install.addsite"
    description="Create tables, insert base records and permissions into new database, copy XML files">
  </target>

  <!-- Programmatically upgrades installed databases for
       the specified appcode and file, runs against the build code,
       not the installed code so that scripts can be run before OR after
       a site has been deployed -->
  <target name="upgradedb.name" unless="arg1">
    <input message="Enter file to process, include the file extension: " addproperty="arg1"/>
  </target>
  <target name="upgradedb.site" unless="arg2">
    <input message="Enter database to upgrade: " addproperty="arg2"/>
  </target>
  <target name="upgradedb.uptodate">
    <uptodate property="classes.uptodate">
      <srcfiles dir="${src.classes.dir}" includes="**/*.java"/>
      <mapper type="merge" to="${build.lib.dir}/aspcfs.jar"/>
    </uptodate>
  </target>
  <target name="upgradedb" depends="init,log.upgradedb,taskdef.upgradeDatabase,taskdef.jasper,upgradedb.name,upgradedb.site,upgradedb.uptodate,build"
    description="Upgrades database using the specified script file">
    <fail unless="arg1">Missing arg1 -- the file to process</fail>
    <fail unless="arg2">Missing arg2 -- the database to upgrade</fail>
    <upgradeDatabase
      sitecode="${GATEKEEPER.APPCODE}"
      driver="${GATEKEEPER.DRIVER}"
      url="${GATEKEEPER.URL}"
      user="${GATEKEEPER.USER}"
      password="${GATEKEEPER.PASSWORD}"
      servletJar="${servletJar}"
      fileLibraryPath="${CENTRIC_FILELIBRARY}"
      baseFile="${src.sql.dir}${fs}${SITE.DBTYPE}${fs}upgrade${fs}${arg1}"
      specificDatabase="${arg2}"
      locale="${LOCALE.NAME}"
      languagePath="${src.dir}${fs}languages"
      iceletsPath="${src.dir}${fs}icelets"
      params="mode=upgrade">
    </upgradeDatabase>
  </target>

  <!-- Generate Java Docs -->
  <target name="docs" description="Generate JavaDocs" depends="compile">
    <mkdir dir="${build.docs.dir}"/>
    <javadoc sourcepath="${src.classes.dir}"
      packagenames="com.*,org.*"
      destdir="${build.docs.dir}"
      maxmemory="128m"
      breakiterator="true"
      author="true"
      version="true"
      excludepackagenames="javax.servlet">
      <tag name="created" description="Date file was created"/>
      <header>Centric CRM</header>
      <footer>Copyright 2001-2006 Dark Horse Ventures, LLC</footer>
      <classpath>
        <path refid="cfs2.classpath"/>
        <!--
        <pathelement location="${SRC_LIB}/aspcfs.jar"/>
        -->
      </classpath>
    </javadoc>
  </target>
  
  <!-- General Contact Importer based on CSV spec -->
  <target name="import.generalcontacts" depends="init">
    <fail unless="arg1">Missing arg1: CSV file to import not specified</fail>
    <fail unless="arg2">Missing arg2: Virtual Host to import to not specified</fail>
    <fail unless="arg3">Missing arg3: Import code not specified</fail>
    <mkdir dir="${build.pref.dir}"/>
    <copy file="${pref.dir}/cfs/transfer/import-generalcontacts.xml" todir="${build.pref.dir}" overwrite="true"/>
    <replace file="${build.pref.dir}/import-generalcontacts.xml"
      token="@PROPERTY.FILE@" value="${pref.dir}/cfs/transfer/import-mappings.xml"/>
    <replace file="${build.pref.dir}/import-generalcontacts.xml"
      token="@CSV.FILE@" value="${arg1}"/>
    <replace file="${build.pref.dir}/import-generalcontacts.xml"
      token="@URL@" value="${arg2}"/>
    <replace file="${build.pref.dir}/import-generalcontacts.xml"
      token="@CODE@" value="${arg3}"/>
    <replace file="${build.pref.dir}/import-generalcontacts.xml"
      token="@SYSTEM.ID@" value="4"/>
    <java classname="org.aspcfs.apps.transfer.Transfer" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${CENTRIC_HOME}/WEB-INF/lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <arg value="${build.pref.dir}${fs}import-generalcontacts.xml"/>
    </java>
  </target>
  
  <!-- Account Contact Importer based on CSV spec -->
  <target name="import.accountcontacts" depends="init">
    <fail unless="arg1">Missing arg1: CSV file to import not specified</fail>
    <fail unless="arg2">Missing arg2: Virtual Host to import to not specified</fail>
    <fail unless="arg3">Missing arg3: Import code not specified</fail>
    <mkdir dir="${build.pref.dir}"/>
    <copy file="${pref.dir}/cfs/transfer/import-accountcontacts.xml" todir="${build.pref.dir}" overwrite="true"/>
    <replace file="${build.pref.dir}/import-accountcontacts.xml"
      token="@PROPERTY.FILE@" value="${pref.dir}/cfs/transfer/import-mappings.xml"/>
    <replace file="${build.pref.dir}/import-accountcontacts.xml"
      token="@CSV.FILE@" value="${arg1}"/>
    <replace file="${build.pref.dir}/import-accountcontacts.xml"
      token="@URL@" value="${arg2}"/>
    <replace file="${build.pref.dir}/import-accountcontacts.xml"
      token="@ID@" value="${arg3}"/>
    <replace file="${build.pref.dir}/import-accountcontacts.xml"
      token="@CODE@" value="${arg4}"/>
    <replace file="${build.pref.dir}/import-accountcontacts.xml"
      token="@SYSTEM.ID@" value="4"/>
    <java classname="org.aspcfs.apps.transfer.Transfer" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${CENTRIC_HOME}/WEB-INF/lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <arg value="${build.pref.dir}${fs}import-accountcontacts.xml"/>
    </java>
  </target>
  
  <!-- Accounts Importer based on CSV spec -->
  <target name="import.accounts" depends="init">
    <fail unless="arg1">Missing arg1: CSV file to import not specified</fail>
    <fail unless="arg2">Missing arg2: Virtual Host to import to not specified</fail>
    <fail unless="arg3">Missing arg3: Import code not specified</fail>
    <mkdir dir="${build.pref.dir}"/>
    <copy file="${pref.dir}/cfs/transfer/import-accounts.xml" todir="${build.pref.dir}" overwrite="true"/>
    <replace file="${build.pref.dir}/import-accounts.xml"
      token="@PROPERTY.FILE@" value="${pref.dir}/cfs/transfer/import-mappings.xml"/>
    <replace file="${build.pref.dir}/import-accounts.xml"
      token="@CSV.FILE@" value="${arg1}"/>
    <replace file="${build.pref.dir}/import-accounts.xml"
      token="@URL@" value="${arg2}"/>
    <replace file="${build.pref.dir}/import-accounts.xml"
      token="@CODE@" value="${arg3}"/>
    <replace file="${build.pref.dir}/import-accounts.xml"
      token="@SYSTEM.ID@" value="4"/>
    <java classname="org.aspcfs.apps.transfer.Transfer" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${CENTRIC_HOME}/WEB-INF/lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <arg value="${build.pref.dir}${fs}import-accounts.xml"/>
    </java>
  </target>


  <!-- Test the XML HTTP API -->
  <target name="import.unittest" depends="init">
    <fail unless="arg2">Missing arg2: Virtual Host to import to not specified</fail>
    <fail unless="arg3">Missing arg3: Import code not specified</fail>
    <mkdir dir="${build.pref.dir}"/>
    <copy file="${pref.dir}/cfs/transfer/import-unittest.xml" todir="${build.pref.dir}" overwrite="true"/>
    <replace file="${build.pref.dir}/import-unittest.xml"
      token="@URL@" value="${arg2}"/>
    <replace file="${build.pref.dir}/import-unittest.xml"
      token="@CODE@" value="${arg3}"/>
    <replace file="${build.pref.dir}/import-unittest.xml"
      token="@SYSTEM.ID@" value="4"/>
    <java classname="org.aspcfs.apps.transfer.Transfer" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${CENTRIC_HOME}/WEB-INF/lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <arg value="${build.pref.dir}${fs}import-unittest.xml"/>
    </java>
  </target>










  <!-- MISC STUFF TO GO THROUGH (AND MOVE SOMEWHERE ELSE) -->
  <target name="run.databasetest" depends="init,install.prepare">
    <java classname="org.aspcfs.apps.test.Database" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <pathelement location="${CENTRIC_HOME}/WEB-INF/lib/aspcfs.jar"/>
        <pathelement location="${CENTRIC_HOME}/WEB-INF/lib/darkhorseventures.jar"/>
      </classpath>
      <sysproperty key="file" value="${arg1}"/>
      <sysproperty key="driver" value="${SITE.DRIVER}"/>
      <sysproperty key="url" value="${SITE.URL}${DATABASE.NAME}${SITE.APPEND}"/>
      <sysproperty key="user" value="${SITE.USER}"/>
      <sysproperty key="pass" value="${SITE.PASSWORD}"/>
    </java>
  </target>

  <!-- Run Vehicle Import -->
  <target name="run.parsekbb" depends="init,install.prepare">
    <java classname="org.aspcfs.modules.media.autoguide.utils.ParseKBB" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <pathelement location="${CENTRIC_HOME}/WEB-INF/lib/aspcfs.jar"/>
        <pathelement location="${CENTRIC_HOME}/WEB-INF/lib/darkhorseventures.jar"/>
      </classpath>
      <sysproperty key="file" value="${arg1}"/>
      <sysproperty key="driver" value="${SITE.DRIVER}"/>
      <sysproperty key="url" value="${SITE.URL}${DATABASE.NAME}${SITE.APPEND}"/>
      <sysproperty key="user" value="${SITE.USER}"/>
      <sysproperty key="pass" value="${SITE.PASSWORD}"/>
    </java>
  </target>


  <!-- Test the EDIT transaction server -->
  <target name="run.edit" depends="init">
    <java classname="org.aspcfs.modules.healthcare.edit.apps.HttpPostTransaction" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${CENTRIC_HOME}/WEB-INF/lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <arg value="${arg1}"/>
      <arg value="${arg2}"/>
    </java>
  </target>
</project>
