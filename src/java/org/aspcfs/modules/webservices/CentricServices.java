/*
 *  Copyright(c) 2004 Dark Horse Ventures LLC (http://www.centriccrm.com/) All
 *  rights reserved. This material cannot be distributed without written
 *  permission from Dark Horse Ventures LLC. Permission to use, copy, and modify
 *  this material for internal use is hereby granted, provided that the above
 *  copyright notice and this permission notice appear in all copies. DARK HORSE
 *  VENTURES LLC MAKES NO REPRESENTATIONS AND EXTENDS NO WARRANTIES, EXPRESS OR
 *  IMPLIED, WITH RESPECT TO THE SOFTWARE, INCLUDING, BUT NOT LIMITED TO, THE
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ANY PARTICULAR
 *  PURPOSE, AND THE WARRANTY AGAINST INFRINGEMENT OF PATENTS OR OTHER
 *  INTELLECTUAL PROPERTY RIGHTS. THE SOFTWARE IS PROVIDED "AS IS", AND IN NO
 *  EVENT SHALL DARK HORSE VENTURES LLC OR ANY OF ITS AFFILIATES BE LIABLE FOR
 *  ANY DAMAGES, INCLUDING ANY LOST PROFITS OR OTHER INCIDENTAL OR CONSEQUENTIAL
 *  DAMAGES RELATING TO THE SOFTWARE.
 */
package org.aspcfs.modules.webservices;

import org.aspcfs.modules.webservices.beans.WSUserBean;
import org.aspcfs.modules.webservices.beans.WSCustomFolder;

import org.aspcfs.apps.transfer.DataRecord;
import org.aspcfs.modules.accounts.base.Organization;
import org.aspcfs.modules.accounts.base.OrganizationAddress;
import org.aspcfs.modules.accounts.base.OrganizationPhoneNumber;
import org.aspcfs.modules.base.Constants;
import org.aspcfs.modules.base.CustomField;
import org.aspcfs.modules.base.CustomFieldCategory;
import org.aspcfs.modules.base.CustomFieldData;
import org.aspcfs.modules.contacts.base.Contact;
import org.aspcfs.modules.login.base.AuthenticationItem;
import org.aspcfs.utils.CRMConnection;
import org.aspcfs.utils.PasswordHash;
import org.aspcfs.utils.XMLUtils;

import org.w3c.dom.Element;

import java.util.ArrayList;
import java.util.Iterator;

/**
 *  CentricServices exposes a set of methods that can be remotely called by any
 *  client using SOAP based calls.<br/>
 *  <br/>
 *  This class needs to be registered with Apache Axis, which makes it available
 *  as a Web Service
 *
 * @author     Ananth
 * @version
 * @created    March 27, 2006
 */
public class CentricServices {
  /*
   *  - The wsdl generated by axis has method arguments as in0, in1, in2 and so on.
   *  - Apache Axis requires arguments to be defined as in0, in1, in2 and so on....
   *  - If arguments are not defined so, then unexpected results are encountered
   *  - TODO: Need to figure out why it happens so and needs to be fixed.
   */
  private CRMConnection crm = new CRMConnection();


  /**
   * @param  in0  Authentication Token
   * @param  in1  Username
   * @param  in2  Password
   * @return      Description of the Return Value
   */
  public int validateUser(AuthenticationItem in0, String in1, String in2) {
    try {
      String username = in1;
      String password = in2;

      //Authentication Info
      crm.setAuthenticationInfo(in0);

      // Start a new transaction
      crm.setAutoCommit(false);

      //Add Meta Info
      ArrayList meta = new ArrayList();
      meta.add("id");
      crm.setTransactionMeta(meta);

      DataRecord login = new DataRecord();
      login.setName("userList");
      login.setAction(DataRecord.SELECT);
      login.addField("username", username);
      login.addField("password", PasswordHash.encrypt(password));
      crm.save(login);

      boolean result = crm.commit();
      System.out.println("RESPONSE: " + crm.getLastResponse());

      return (crm.getRecordCount() == 1 ?
          Integer.parseInt(crm.getResponseValue("id")) : -1);
    } catch (Exception e) {
      e.printStackTrace(System.out);
    }

    return -1;
  }


  /**
   *  Description of the Method
   *
   * @param  in0  Description of the Parameter
   * @return      Description of the Return Value
   */
  public WSUserBean[] retrievePhoneUsers(AuthenticationItem in0) {
    try {
      //Authentication Info
      crm.setAuthenticationInfo(in0);

      // Start a new transaction
      crm.setAutoCommit(false);

      //Add Meta Info
      ArrayList meta = new ArrayList();
      meta.add("id");
      meta.add("username");
      crm.setTransactionMeta(meta);

      DataRecord login = new DataRecord();
      login.setName("userList");
      login.setAction(DataRecord.SELECT);
      login.addField("enabled", Constants.TRUE);
      crm.save(login);

      boolean result = crm.commit();
      System.out.println("RESPONSE: " + crm.getLastResponse());

      Object[] objects = crm.getRecords("org.aspcfs.apps.axis.beans.WSUserBean").toArray();
      WSUserBean[] logins = new WSUserBean[objects.length];
      for (int i = 0; i < objects.length; i++) {
        WSUserBean thisUser = (WSUserBean) objects[i];
        Contact contact = getContact(in0, thisUser.getId());
        if (contact != null) {
          thisUser.setNameFirst(contact.getNameFirst());
          thisUser.setNameLast(contact.getNameLast());
        }
        logins[i] = thisUser;
      }

      return logins;
    } catch (Exception e) {
      e.printStackTrace(System.out);
    }

    return null;
  }


  /**
   *  Gets the contact attribute of the CentricServices object
   *
   * @param  in0     Description of the Parameter
   * @param  in1     Description of the Parameter
   * @return         The contact value
   */
  private Contact getContact(AuthenticationItem in0, int in1) {
    try {
      int userId = in1;

      //Authentication Info
      crm.setAuthenticationInfo(in0);

      // Start a new transaction
      crm.setAutoCommit(false);

      //Add Meta Info
      ArrayList meta = new ArrayList();
      meta.add("nameFirst");
      meta.add("nameLast");
      crm.setTransactionMeta(meta);

      DataRecord contact = new DataRecord();
      contact.setName("contactList");
      contact.setAction(DataRecord.SELECT);
      contact.addField("contactUserId", userId);
      crm.save(contact);

      boolean result = crm.commit();
      System.out.println("RESPONSE: " + crm.getLastResponse());

      ArrayList contacts = crm.getRecords("org.aspcfs.modules.contacts.base.Contact");
      if (contacts.size() == 1) {
        return (Contact) contacts.get(0);
      }
    } catch (Exception e) {
      e.printStackTrace(System.out);
    }

    return null;
  }


  


  


  


  /**
   *  Description of the Method
   *
   * @param  in0        Description of the Parameter
   * @param  in1        Description of the Parameter
   * @return            Description of the Return Value
   */
  public WSCustomFolder[] retrieveAccountFolders(AuthenticationItem in0, int in1) {
    try {
      int accountId = in1;

      //Authentication Info
      crm.setAuthenticationInfo(in0);

      // Start a new transaction
      crm.setAutoCommit(false);

      //Add Meta Info
      ArrayList meta = new ArrayList();
      meta.add("id");
      meta.add("linkItemId");
      meta.add("name");
      meta.add("description");
      crm.setTransactionMeta(meta);

      DataRecord category = new DataRecord();
      category.setName("customFieldCategoryList");
      category.setAction(DataRecord.SELECT);
      category.addField("linkModuleId", Constants.ACCOUNTS);
      category.addField("linkItemId", accountId);
      //TODO: Add other filters here in the future
      crm.save(category);

      boolean result = crm.commit();
      System.out.println("RESPONSE: " + crm.getLastResponse());

      Object[] objects = crm.getRecords("org.aspcfs.apps.axis.beans.WSCustomFolder").toArray();
      WSCustomFolder[] folders = new WSCustomFolder[objects.length];
      for (int i = 0; i < objects.length; i++) {
        folders[i] = (WSCustomFolder) objects[i];
      }

      return folders;
    } catch (Exception e) {
      e.printStackTrace(System.out);
    }

    return null;
  }


  /**
   *  Description of the Method
   *
   * @param  in0       Description of the Parameter
   * @param  in1       Description of the Parameter
   * @return           Description of the Return Value
   */
  public CustomField[] retrieveCustomFields(AuthenticationItem in0, int in1) {
    try {
      int folderId = in1;

      //Authentication Info
      crm.setAuthenticationInfo(in0);

      // Start a new transaction
      crm.setAutoCommit(false);

      //Add Meta Info
      ArrayList meta = new ArrayList();
      meta.add("id");
      meta.add("name");
      crm.setTransactionMeta(meta);

      DataRecord category = new DataRecord();
      category.setName("customFieldList");
      category.setAction(DataRecord.SELECT);
      category.addField("categoryId", folderId);
      crm.save(category);

      boolean result = crm.commit();
      System.out.println("RESPONSE: " + crm.getLastResponse());

      Object[] objects = crm.getRecords("org.aspcfs.modules.base.CustomField").toArray();
      CustomField[] fields = new CustomField[objects.length];
      for (int i = 0; i < objects.length; i++) {
        fields[i] = (CustomField) objects[i];
      }

      return fields;
    } catch (Exception e) {
      e.printStackTrace(System.out);
    }

    return null;
  }


  /**
   *  Description of the Method
   *
   * @param  in0  Description of the Parameter
   * @param  in1  Description of the Parameter
   * @param  in2  Description of the Parameter
   * @param  in3  Description of the Parameter
   * @return      Description of the Return Value
   */
  public CustomFieldData[] retrieveCustomData(AuthenticationItem in0, int in1, int in2, int in3) {
    try {
      //Authentication Info
      crm.setAuthenticationInfo(in0);

      // Start a new transaction
      crm.setAutoCommit(false);

      int accountId = in1;
      int folderId = in2;
      int fieldId = in3;

      //Add Meta Info
      ArrayList meta = new ArrayList();
      meta.add("enteredValue");
      crm.setTransactionMeta(meta);

      DataRecord category = new DataRecord();
      category.setName("customFieldDataList");
      category.setAction(DataRecord.SELECT);
      category.addField("linkModuleId", Constants.ACCOUNTS);
      category.addField("linkItemId", accountId);
      category.addField("categoryId", folderId);
      category.addField("fieldId", fieldId);
      crm.save(category);

      boolean result = crm.commit();
      System.out.println("RESPONSE: " + crm.getLastResponse());

      Object[] objects = crm.getRecords("org.aspcfs.modules.base.CustomFieldData").toArray();
      CustomFieldData[] data = new CustomFieldData[objects.length];
      for (int i = 0; i < objects.length; i++) {
        data[i] = (CustomFieldData) objects[i];
      }

      return data;
    } catch (Exception e) {
      e.printStackTrace(System.out);
    }

    return null;
  }


  /**
   *  Adds a feature to the CustomRecord attribute of the CentricServices object
   *
   * @param  in0  The feature to be added to the CustomRecord attribute
   * @param  in1  The feature to be added to the CustomRecord attribute
   * @param  in2  The feature to be added to the CustomRecord attribute
   * @param  in3  The feature to be added to the CustomRecord attribute
   * @param  in4  The feature to be added to the CustomRecord attribute
   * @param  in5  The feature to be added to the CustomRecord attribute
   * @return      Description of the Return Value
   */
  public boolean addCustomRecord(AuthenticationItem in0, int in1, int in2, int in3, int in4, int in5) {
    //insert a new record
    //insert custom field data
    try {
      //Authentication Info
      crm.setAuthenticationInfo(in0);

      // Start a new transaction
      crm.setAutoCommit(false);

      int userId = in1;
      int folderId = in2;
      int fieldId = in3;
      int accountId = in4;
      int input = in5;

      //Add Meta Info
      ArrayList meta = new ArrayList();
      meta.add("id");
      crm.setTransactionMeta(meta);

      DataRecord customRecord = new DataRecord();
      customRecord.setName("customFieldRecord");
      customRecord.setAction(DataRecord.INSERT);
      customRecord.setShareKey(true);
      customRecord.addField("linkModuleId", Constants.ACCOUNTS);
      customRecord.addField("linkItemId", accountId);
      customRecord.addField("categoryId", folderId);
      customRecord.addField("enteredBy", userId);
      customRecord.addField("modifiedBy", userId);
      crm.save(customRecord);

      DataRecord customData = new DataRecord();
      customData.setName("customFieldData");
      customData.setAction(DataRecord.INSERT);
      customData.setShareKey(true);
      customData.addField("recordId", "$C{customFieldRecord.id}");
      customData.addField("fieldId", fieldId);
      customData.addField("enteredValue", input);
      customData.addField("enteredNumber", input);
      customData.addField("enteredDouble", input);
      crm.save(customData);

      boolean result = crm.commit();
      System.out.println("RESPONSE: " + crm.getLastResponse());

    } catch (Exception e) {
      e.printStackTrace(System.out);
    }

    return (crm.getStatus() == 0);
  }
}

