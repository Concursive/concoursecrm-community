#!/bin/sh

#############################################################################
#
# ASPCFS Database initialization script.  Used for deploying a new database 
# with defaults.
#
# $Id: Exp$
#
# Requirements:
# - Must have an environment script with CLASSPATH specified in scripts/
# - The system user "cfsdba" must exist, as well as a Postgresql user
#
# Actions:
# - Drops the specified database
# - Creates the specified database
# - Initializes the tables to CFS details
#
#############################################################################
ENVFILE="scripts/env.`hostname`.sh"
PROGNAME=`basename $0`
BASE=`pwd`
CFSDBA="cfsdba"
SITEHOME="/home"
SITECODE=""

usage ()
{
	printf "\nUsage: ${PROGNAME} [site_code]\n\n"
	printf "Where:\n"
  printf "    site_code = the target database to create, without the cdb_\n"
	printf "\n"
	exit 1
}

#############################################################################
#
# Check that user is root.
#
#############################################################################
if [ "`id -u`" != "0" ] ; then echo "Sorry, you must be root." ; exit 1 ; fi

#############################################################################
#
# Set up environment.
#
#############################################################################
if [ ! -f "${ENVFILE}" ] ; then echo "Missing file: ${ENVFILE}" ; exit ; fi
. ${ENVFILE}
SITECODE=""

#############################################################################
#
# Get command-line parameters... must perform after ENVFILE
#
#############################################################################
if [ -n "$1" ] ; then SITECODE="$1"; shift ; fi
if [ -z "${SITECODE}" ] ; then echo "Missing site code" ; usage ; fi

#############################################################################
#
# Configuration using supplied parameters.
#
#############################################################################
DIRDST="${SITEHOME}/${SITECODE}"
DB="cdb_${SITECODE}"

#############################################################################
#
# Begin install
#
#############################################################################
LOG="${PROGNAME}_${SITECODE}.log"

echo "Creating database: ${DB}"

echo `date` >${LOG}

# Create the database
su - ${CFSDBA} -c "dropdb ${DB}" >>${LOG}
su - ${CFSDBA} -c "createdb ${DB}" >>${LOG} 2>&1
if [ -n "`grep -i ERROR ${LOG}`" ] ; then echo "Database error"; exit 2; fi

# Create the tables and insert base data
echo -n "Initializing database tables and data... "
(
su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/postgresql/new_cdb.sql "
su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/cdb.init " 
su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/code_tables.init " 
su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/access.init " 
su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/organization.init "
su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/data.init " 

su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/postgresql/new_opportunity.sql "  
su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/opportunity.init "

su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/postgresql/new_tms.sql " 
su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/tms.init "

su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/postgresql/new_custom_field.sql "

su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/postgresql/new_project.sql "
su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/project.init "

su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/postgresql/new_campaign.sql "
su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/campaign.init "

su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/postgresql/new_help.sql "

su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/postgresql/new_sync.sql "
su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/sync.init "

su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/postgresql/new_task.sql "
su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/task.init "

su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/postgresql/new_revenue.sql "
su - $SUDO_USER -c "psql ${DB} -af ${BASE}/database/revenue.init "

) >>${LOG} 2>&1 

if [ -n "`grep -i ERROR ${LOG}`" ] ; then 
  echo "ERROR OCCURRED, check log!"; 
else
  echo "finished"
fi
  
# Additional initializations
echo -n "Inserting permissions and roles... "
(
java -cp .:${CLASSPATH}:${BASE}/bin/Notifier.jar -Ddriver=org.postgresql.Driver -Durl=jdbc:postgresql://127.0.0.1:5432/${DB} -Duser=postgres -DprocessConfigFile=${BASE}/database/permissions.xml com.darkhorseventures.apps.dataimport.DataImport ${BASE}/database/permissions-dataimport.xml
) >>${LOG} 2>&1 
echo "finished"

echo "Log file stored at: ${LOG}"

exit 0

