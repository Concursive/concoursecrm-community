<!--
 $Id$

 Notes: 
   The easiest way to get started is to run "ant deploy"
   
   The build process will instruct you to have several environment variables
   and to customize the build.properties.  The build will fail until all
   installation conditions are met.
   
   Do not edit master.properties in this folder, a copy will be
   made by the installation and you will be notified of the file to modify.
   
   The build process needs write access to the destination web-app folder.
-->
<project name="Dark Horse CRM" default="usage" basedir=".">
  
  <!-- enable environment variables -->
  <property environment="env"/>
  
  <!-- constants -->
  <property name="POSTGRESQL" value="postgresql"/>
  <property name="MSSQL" value="mssql"/>
  
  <!-- computed properties -->
  <property name="fs" value="${file.separator}"/>
  <property name="lf" value="${line.separator}"/>
  <property name="base.dir" value="${basedir}"/>
  <property name="bin.dir" value="${base.dir}${fs}bin"/>
  <property name="lib.dir" value="${base.dir}${fs}lib"/>
  <property name="src.dir" value="${base.dir}${fs}src"/>
  <property name="src.classes.dir" value="${src.dir}${fs}java"/>
  <property name="src.web.dir" value="${src.dir}${fs}web"/>
  <property name="src.sql.dir" value="${src.dir}${fs}sql"/>
  <property name="build.dir" value="${base.dir}${fs}build"/>
  <property name="build.lib.dir" value="${build.dir}${fs}lib"/>
  <property name="build.classes.dir" value="${build.dir}${fs}classes"/>
  <property name="build.jsp.dir" value="${build.dir}${fs}jsp"/>
  <property name="build.jspclasses.dir" value="${build.dir}${fs}jspclasses"/>
  <property name="build.sql.dir" value="${build.dir}${fs}sql"/>
  <property name="build.docs.dir" value="${build.dir}${fs}docs"/>
  <property name="build.pref.dir" value="${build.dir}${fs}pref"/>
  <property name="pref.dir" value="${base.dir}${fs}pref"/>
  <property name="dist.dir" value="${base.dir}${fs}dist"/>
  
  <!-- Typical usage -->
  <target name="usage">
    <echo message="Further instructions will appear if settings are missing"/>
    <echo message=""/>
    <echo message="ant init: verify system environment needed by install"/>
    <echo message="ant compile: compile all .java source files"/>
    <echo message="ant build: create .jar files for compiled classes"/>
    <echo message="ant deploy: compile, build, copy, and configure web application (production)"/>
    <echo message="ant dev: same as deploy, but doesn't do a clean compile (development)"/>
    <echo message="ant installgk: create tables for gatekeeper database"/>
    <echo message="ant installdb: create tables, insert base records and permissions into new database"/>
    <echo message="    install.database: just create the tables and base data"/>
    <echo message="    install.permissions: just install the permissions"/>
    <echo message="    install.help: just install the help contents"/>
    <echo message="    install.addsite: just add a site to the gatekeeper database"/>
    <echo message="    install.copyprefs: just copy site pref files to WEB-INF fileLibrary"/>
    <echo message="ant upgradedb: upgrades all databases in the gatekeeper with a specified script file"/>
    <echo message="    upgradedb.help: upgrades the help contents of a specific database"/>
    <echo message="ant test: compile deployed JSPs to check for errors"/>
    <echo message="ant clean: delete the temporary build folder used by the install"/>
    <echo message="ant docs: generate JavaDocs for all packages"/>
  </target>
  
  <!-- Environment variables must be set before continuing -->
  <target name="init.environment">
    <tstamp><format property="date.short" pattern="yyyyMMdd-HHmmss"/></tstamp>
    <tstamp><format property="date.long" pattern="yyyy-MM-dd hh:mm:ss aa"/></tstamp>
    <!-- log the build -->
    <record name="${base.dir}/build.log" append="no"/>
    <fail unless="env.CATALINA_HOME">Initialization aborted ${lf}${lf}Environment variable CATALINA_HOME is not defined.</fail>
    <property name="CATALINA_HOME" value="${env.CATALINA_HOME}"/>
    <fail unless="env.CFS_HOME">Initialization aborted ${lf}${lf}Environment variable CFS_HOME is not defined and should point to a Tomcat CFS web folder.</fail>
    <property name="CFS_HOME" value="${env.CFS_HOME}"/>
  </target>
  
  <!-- See if servlet API file exists -->
  <target name="init.servlet4.exists" depends="init.environment">
    <available file="${CATALINA_HOME}/common/lib/servlet.jar" 
               property="build.servlet4.present"/>
  </target>
  <target name="init.servlet4.set" depends="init.servlet4.exists" if="build.servlet4.present">
    <property name="servletJar" value="${CATALINA_HOME}${fs}common${fs}lib${fs}servlet.jar"/>
    <echo message="Web Server: Tomcat 4.x"/>
  </target>
  <target name="init.servlet5.exists" depends="init.environment">
    <available file="${CATALINA_HOME}/common/lib/servlet-api.jar" 
               property="build.servlet5.present"/>
  </target>
  <target name="init.servlet5.set" depends="init.servlet5.exists" if="build.servlet5.present">
    <property name="servletJar" value="${CATALINA_HOME}${fs}common${fs}lib${fs}servlet-api.jar"/>
    <echo message="Web Server: Tomcat 5.x"/>
  </target>
  
  <!-- See if the properties file exists -->
  <target name="init.buildfile.exists" depends="init.environment">
    <available file="${CFS_HOME}/WEB-INF/fileLibrary/build.properties" 
               property="build.config.present"/>
  </target>
  
  <!-- Reports an invalid location that must be fixed -->
  <target name="init.buildfile.location" depends="init.buildfile.exists" 
          unless="build.config.present">
    <available file="${CFS_HOME}/WEB-INF/build.properties" property="build.config.old"/>
    <fail if="build.config.old">Initialization aborted${lf}${lf}The build.properties file needs to be moved to ${CFS_HOME}${fs}WEB-INF${fs}fileLibrary${fs} making any necessary changes as compared with the master.properties file.${lf}${lf}Old File: ${CFS_HOME}${fs}WEB-INF${fs}build.properties${lf}New File: ${CFS_HOME}${fs}WEB-INF${fs}fileLibrary${fs}build.properties${lf}Source Template: ${base.dir}${fs}master.properties</fail>
  </target>
  
  <!-- Create the properties file if not exists -->
  <target name="init.buildfile.create" depends="init.buildfile.exists,init.buildfile.location" 
          unless="build.config.present">
    <mkdir dir="${CFS_HOME}/WEB-INF"/>
    <mkdir dir="${CFS_HOME}/WEB-INF/fileLibrary"/>
    <copy file="${base.dir}/master.properties" 
          tofile="${CFS_HOME}/WEB-INF/fileLibrary/build.properties"
          overwrite="false"/>
    <available file="${CFS_HOME}/WEB-INF/fileLibrary/build.properties" property="build.config.present"/>
  </target>
  
  <!-- Load the properties for this system, stop here if not found -->
  <target name="init.loadproperties" depends="init.buildfile.create">
    <!-- IF src build.properties is newer than CFS_HOME build.properties, abort now and have user update -->
    <uptodate property="build.config.uptodate"
            srcfile="${base.dir}/master.properties"
            targetfile="${CFS_HOME}/WEB-INF/fileLibrary/build.properties"/>
    <fail unless="build.config.uptodate">Initialization aborted${lf}${lf}The build.properties file might be out of date.  Compare and update the site copy with the source template, making any necessary changes.${lf}${lf}Site File: ${CFS_HOME}${fs}WEB-INF${fs}fileLibrary${fs}build.properties${lf}Source Template: master.properties</fail>
    <loadproperties srcFile="${CFS_HOME}/WEB-INF/fileLibrary/build.properties">
      <filterchain>
        <filterreader classname="org.apache.tools.ant.filters.StripLineComments">
          <param type="comment" value="#"/>
        </filterreader>
      </filterchain>
    </loadproperties>
    <fail unless="build.config.present">Initialization aborted ${lf}${lf}The build properties file was not found at ${CFS_HOME}${fs}WEB-INF${fs}fileLibrary${fs}build.properties</fail>
    <fail unless="CONTROL">Initialization aborted ${lf}${lf}Edit the properties file at ${CFS_HOME}${fs}WEB-INF${fs}fileLibrary${fs}build.properties, make sure to uncomment the control parameter</fail>
  </target>
  
  <!-- Copy the common jars -->
  <target name="init.classpath.uptodate">
    <mkdir dir="${CFS_HOME}/WEB-INF/lib"/>
    <copy todir="${CFS_HOME}/WEB-INF/lib">
      <fileset dir="${lib.dir}">
        <include name="*.jar"/>
      </fileset>
    </copy>
  </target>
  
  <!-- Configure classpath as both object and a property -->
  <target name="init.classpath" depends="init.classpath.uptodate">
    <path id="cfs2.classpath">
      <fileset dir="${CATALINA_HOME}/common/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${lib.dir}">
        <include name="*.jar"/>
      </fileset>
    </path>
    <property name="CLASSPATH" refid="cfs2.classpath" />
  </target>
  
  <!-- Prepare ant for processing -->
  <target name="init" depends="init.loadproperties,init.classpath,init.servlet4.set,init.servlet5.set" 
    description="Verify system environment needed by install">
    <!-- Default properties if not otherwise specified in build.properties -->
    <property name="DEBUGLEVEL" value="none"/>
    <!-- Gatekeeper database -->
    <property name="GATEKEEPER.APPCODE" value=""/>
    <property name="GATEKEEPER.DBTYPE" value=""/>
    <property name="GATEKEEPER.DRIVER" value=""/>
    <property name="GATEKEEPER.URL" value=""/>
    <property name="GATEKEEPER.USER" value=""/>
    <property name="GATEKEEPER.PASSWORD" value=""/>
    <!-- Additional sites/databases -->
    <property name="SITE.APPCODE" value=""/>
    <property name="SITE.DBTYPE" value=""/>
    <property name="SITE.DRIVER" value=""/>
    <property name="SITE.URL" value=""/>
    <property name="SITE.USER" value=""/>
    <property name="SITE.PASSWORD" value=""/>
    <!-- External Servers -->
    <property name="MAILSERVER" value="127.0.0.1"/>
    <property name="FAXSERVER" value="127.0.0.1"/>
    
    <!-- Begin output -->
    <echo message="Project: ${ant.project.name}"/>
    <echo message="Date: ${date.long}"/>
    <echo message="User: ${user.name}"/>
    <echo message="System: ${os.name} ${os.arch} ${os.version}"/>
    <echo message="Ant version: ${ant.version}"/>
    <echo message="Java version: ${java.version}"/>
    <echo message="Source Path: ${base.dir}"/>
    <echo message="Destination Path: ${CFS_HOME}"/>
  </target>
  
  <target name="taskdef.upgradeDatabase" depends="init">
    <taskdef name="upgradeDatabase" 
        classname="org.aspcfs.ant.tasks.UpgradeDatabaseTask">
        <classpath>
          <fileset dir="${build.lib.dir}">
            <include name="*.jar"/>
          </fileset>
          <fileset dir="${lib.dir}">
            <include name="*.jar"/>
          </fileset>
        </classpath>
    </taskdef>
  </target>
  
  <target name="taskdef.jasper" depends="init">
    <taskdef name="compileJasperReport" 
        classname="dori.jasper.ant.JRAntCompileTask">
        <classpath>
          <fileset dir="${build.lib.dir}">
            <include name="*.jar"/>
          </fileset>
          <fileset dir="${lib.dir}">
            <include name="*.jar"/>
          </fileset>
        </classpath>
    </taskdef>
  </target>
  
  <target name="taskdef.register" depends="init">
    <taskdef name="register" 
        classname="org.aspcfs.ant.tasks.RegisterTask">
        <classpath>
          <fileset dir="${build.lib.dir}">
            <include name="*.jar"/>
          </fileset>
          <fileset dir="${lib.dir}">
            <include name="*.jar"/>
          </fileset>
        </classpath>
    </taskdef>
  </target>
  
  <!-- See if files are up-to-date so only new files are installed during development -->
  <target name="classes.prepare" depends="init">
    <uptodate property="classes.uptodate">
      <srcfiles dir="${src.classes.dir}" includes="**/*.java"/>
      <mapper type="merge" to="${CFS_HOME}/WEB-INF/lib/aspcfs.jar"/>
    </uptodate>
  </target>
  
  <!-- Check to see if previously compiled classes should be deleted -->
  <target name="compile.checkdelete" depends="init">
    <condition property="compile.donotdelete">
      <isset property="classes.uptodate"/>
    </condition>
    <condition property="compile.donotdelete">
      <and>
        <not>
          <isset property="classes.uptodate"/>
        </not>
        <isset property="compile.donotdelete.property"/>
      </and>
    </condition>
  </target>
  
  <target name="compile.delete"
          depends="init,compile.checkdelete"
          unless="compile.donotdelete">
    <!-- Get rid of any classes in the source dir that shouldn't be there -->
    <delete>
        <fileset dir= "${src.classes.dir}" includes="**/*.class"/>
    </delete>
    <delete dir="${build.classes.dir}"/>
    <mkdir dir="${build.classes.dir}"/>
  </target>
  
  <!-- Compile the Java source code -->
  <target name="compile" 
          description="Compile all .java source files"
          depends="init,compile.delete"
          unless="classes.uptodate">
    <!-- Compile the code -->
    <!--
    <javac srcdir="${src.classes.dir}" destdir="${build.classes.dir}" verbose="off" deprecation="on"
           debug="true" debuglevel="lines, vars, source">
    -->
    <javac srcdir="${src.classes.dir}" destdir="${build.classes.dir}" verbose="off" deprecation="off">
      <classpath>
        <path refid="cfs2.classpath"/>
      </classpath>
    </javac>
  </target>
  
  <!-- Generate the .jar files -->
  <target name="jar" 
          depends="init"
          unless="classes.uptodate">
    <delete dir="${build.lib.dir}"/>
    <mkdir dir="${build.lib.dir}"/>
    <!-- darkhorseventures.jar -->
    <jar jarfile="${build.lib.dir}/darkhorseventures.jar"
          basedir="${build.classes.dir}"
          includes="com/darkhorseventures/**/*.class"/>
    <!-- isavvix.jar -->
    <jar jarfile="${build.lib.dir}/isavvix.jar"
          basedir="${build.classes.dir}"
          includes="com/isavvix/**/*.class"/>
    <!-- zeroio-iteam.jar -->
    <jar jarfile="${build.lib.dir}/zeroio-iteam.jar"
          basedir="${build.classes.dir}"
          includes="com/zeroio/**/*.class"/>
    <!-- aspcfs.jar -->
    <jar jarfile="${build.lib.dir}/aspcfs.jar"
          basedir="${build.classes.dir}"
          includes="org/aspcfs/**/*.class"/>
    <!-- jcrontab.jar -->
    <jar jarfile="${build.lib.dir}/jcrontab.jar"
          basedir="${build.classes.dir}"
          includes="org/jcrontab/**/*.class"/>
  </target>
  
  <target name="build"
          description="Create .jar files for compiled classes"
          depends="init,compile,jar">
    <mkdir dir="${build.lib.dir}"/>
  </target>
  
  <!-- Delete outdated files -->
  <target name="deploy.delete" description="Removes outdated files from web application">
    <delete>
      <fileset dir="${CFS_HOME}" includesfile="${base.dir}/build.cleanup"/>
    </delete>
  </target>
  
  <target name="deploy.copy">
    <!-- Copy the .jars, only if new -->
    <copy todir="${CFS_HOME}/WEB-INF/lib">
      <fileset dir="${build.lib.dir}">
        <include name="*.jar"/>
      </fileset>
    </copy>
    <!-- Copy the web data, only if new -->
    <copy todir="${CFS_HOME}">
      <fileset dir="${src.web.dir}/jsp">
        <include name="**"/>
      </fileset>
    </copy>
    <copy todir="${CFS_HOME}">
      <fileset dir="${src.web.dir}/html">
        <include name="**"/>
      </fileset>
    </copy>
    <copy todir="${CFS_HOME}" >
      <fileset dir="${src.web.dir}">
        <include name="images/**" />
        <include name="javascript/**" />
        <include name="css/**" />
      </fileset>
    </copy>
    <!-- Copy the configuration files -->
    <copy todir="${CFS_HOME}/WEB-INF" verbose="true">
      <fileset dir="${src.web.dir}/WEB-INF">
        <include name="*.xml"/>
        <include name="*.tld"/>
        <exclude name="web.xml"/>
      </fileset>
    </copy>
    <!-- Copy this build file -->
    <copy file="${base.dir}/build.xml" todir="${CFS_HOME}/WEB-INF/fileLibrary" verbose="true"/>
  </target>
  
  <target name="deploy.jasper.check" depends="init">
    <uptodate property="deploy.jasper.uptodate">
      <srcfiles dir="${src.dir}/jasper_reports" includes="*.xml"/>
      <mapper type="merge" to="${CFS_HOME}/WEB-INF/reports/accounts_type.jasper"/>
    </uptodate>
  </target>
  
  <target name="deploy.jasper" depends="deploy.jasper.check,taskdef.jasper" unless="deploy.jasper.uptodate">
    <echo message="Installing JasperReport files"/>
    <!-- Copy the jasperreports, only if new -->
    <copy todir="${CFS_HOME}/WEB-INF/reports">
      <fileset dir="${src.dir}/jasper_reports">
        <include name="*.xml"/>
      </fileset>
    </copy>
    <!-- The old .jasper file must be removed when a new .xml is copied -->
    <delete>
        <fileset dir= "${CFS_HOME}/WEB-INF/reports" includes="*.jasper"/>
    </delete>
    <!-- Compile the reports -->
    <compileJasperReport
        srcdir="${CFS_HOME}/WEB-INF/reports"
        destdir="${CFS_HOME}/WEB-INF/reports"
        compiler="dori.jasper.engine.design.JRBshCompiler"/>
  </target>
  
  <!-- See if there is an updated file to merge -->
  <target name="deploy.merge.prepare">
    <!-- Generate a new CFS_HOME web.xml if any of the following: -->
    <!-- 1. cvs web.xml is newer than CFS_HOME web.xml -->
    <!-- 2. CFS_HOME build.properties is newer than CFS_HOME web.xml -->
    <!-- 3. Any of the CFS_HOME xml or tld files are newer than CFS_HOME web.xml -->
    <condition property="deploy.merge.uptodate">
      <and>
        <available file="${CFS_HOME}/WEB-INF/web.xml"/>
        <available file="${CFS_HOME}/WEB-INF/fileLibrary/build.properties"/>
        <uptodate srcfile="${src.web.dir}/WEB-INF/web.xml"
                  targetfile="${CFS_HOME}/WEB-INF/web.xml"/>
        <uptodate srcfile="${CFS_HOME}/WEB-INF/fileLibrary/build.properties"
                  targetfile="${CFS_HOME}/WEB-INF/web.xml"/>
        <uptodate targetfile="${CFS_HOME}/WEB-INF/web.xml">
          <srcfiles dir="${CFS_HOME}/WEB-INF" includes="*.xml,*.tld" excludes="web.xml"/>
        </uptodate>
      </and>
    </condition>
  </target>
  
  <!-- Merge meta-data with build.properties, only if changed so reload doesn't kick in -->
  <target name="deploy.merge" depends="deploy.merge.prepare" unless="deploy.merge.uptodate">
    <echo message="Installing web.xml configuration file"/>
    <copy file="${src.web.dir}/WEB-INF/web.xml" todir="${CFS_HOME}/WEB-INF" overwrite="true"/>
    <replace file="${CFS_HOME}/WEB-INF/web.xml"
             token="@KEYSTORE@" value="${CFS_HOME}${fs}WEB-INF${fs}fileLibrary${fs}keystore"/>
  </target>
  
  <!-- Log the deployment procss to the web-app folder -->
  <target name="log.deploy" depends="init.loadproperties">
    <mkdir dir="${CFS_HOME}/WEB-INF/logs"/>
    <record name="${CFS_HOME}/WEB-INF/logs/deploy-${date.short}.log" append="no"/>
  </target>
  
  <target name="log.upgradedb" depends="init.loadproperties">
    <mkdir dir="${CFS_HOME}/WEB-INF/logs"/>
    <record name="${CFS_HOME}/WEB-INF/logs/upgradedb-${date.short}.log" append="no"/>
  </target>
  
  <target name="log.installdb" depends="init.loadproperties">
    <mkdir dir="${CFS_HOME}/WEB-INF/logs"/>
    <record name="${CFS_HOME}/WEB-INF/logs/installdb-${date.short}.log" append="no"/>
  </target>
  
  <!-- Check if keyfile exists -->
  <target name="keyfile.exists" depends="init">
    <available file="${CFS_HOME}/WEB-INF/fileLibrary/keystore" property="keyfile.present"/>
  </target>
  
  <!-- Generate keyfile for new system -->
  <target name="keyfile" depends="keyfile.exists" unless="keyfile.present">
    <genkey alias="cfs" 
            keystore="${CFS_HOME}/WEB-INF/fileLibrary/keystore"
            storepass="aspcfs" 
            storetype="JKS"
            keyalg="RSA"
            keysize="1024"
            validity="${KEYSTORE.VALIDITY}">
      <dname>
        <param name="CN" value="${KEYSTORE.COMMONNAME}"/>
        <param name="OU" value="${KEYSTORE.ORGANIZATIONALUNIT}"/>
        <param name="O"  value="${KEYSTORE.ORGANIZATION}"/>
        <param name="L"  value="${KEYSTORE.CITY}"/>
        <param name="ST" value="${KEYSTORE.STATE}"/>
        <param name="C"  value="${KEYSTORE.COUNTRY}"/>
      </dname>
    </genkey>
    <!-- Prepare a CSR to get signed
    keytool -certreq -keyalg RSA -alias cfs -file ${CFS_HOME}/WEB-INF/fileLibrary/domain.csr -keystore ${CFS_HOME}/WEB-INF/fileLibrary/keystore
    -->
    <!-- Import the signed certificates
    keytool -import -trustcacerts -alias root -file GTECyberTrustRoot.crt -keystore ${CFS_HOME}/WEB-INF/fileLibrary/keystore
    keytool -import -trustcacerts -alias comodo -file ComodoSecurityServicesCA.crt -keystore ${CFS_HOME}/WEB-INF/fileLibrary/keystore
    keytool -import -trustcacerts -alias cfs -file domain.crt -keystore ${CFS_HOME}/WEB-INF/fileLibrary/keystore
    -->
    <!-- Export the certificate for a client app to use
    keytool -export -alias cfs -file ${CFS_HOME}/WEB-INF/fileLibrary/domain.cert -keystore ${CFS_HOME}/WEB-INF/fileLibrary/keystore
    -->
  </target>
  
  <!-- Check if license exists -->
  <target name="license.exists" depends="init">
    <available file="${CFS_HOME}/WEB-INF/fileLibrary/init/input.txt" property="license.present"/>
  </target>
  
  <!-- Generate license for new system -->
  <target name="license" depends="license.exists,taskdef.register" unless="license.present">
    <mkdir dir="${CFS_HOME}/WEB-INF/fileLibrary/init"/>
    <register
        organization="${LICENSE.ORGANIZATION}"
        firstName="${LICENSE.FIRST_NAME}"
        lastName="${LICENSE.LAST_NAME}"
        email="${LICENSE.EMAIL}"
        profile="${LICENSE.PROFILE}"
        webPath="${CFS_HOME}${fs}WEB-INF${fs}fileLibrary${fs}init${fs}">
    </register>
  </target>
  
  <!-- Copy all data to the web-app folder and finalize any items -->
  <target name="deploy"
          description="Compile, build, copy, and configure web application"
          depends="log.deploy,classes.prepare,build,keyfile,license,deploy.delete,deploy.copy,deploy.merge,deploy.jasper">
    <mkdir dir="${CFS_HOME}/graphs"/>
  </target>
  
  <target name="dev.configure">
    <property name="compile.donotdelete.property" value="true"/>
  </target>
  
  <target name="dev"
          description="Deploy without deleting previously compiled source"
          depends="dev.configure,deploy">
  </target>
  
  <!-- Generate .java/.class files out of the web-app .jsps -->
  <target name="test" depends="init,deploy"
    description="Compile deployed JSPs to check for errors">
    <delete dir="${build.jsp.dir}"/>
    <delete dir="${build.jspclasses.dir}"/>
    <mkdir dir="${build.jsp.dir}"/>
    <java classname="org.apache.jasper.JspC" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <pathelement location="${env.ANT_HOME}/lib/ant.jar"/>
      </classpath>
      <arg line="-v -d ${build.jsp.dir} -p org.apache.jsp
                -uriroot ${CFS_HOME}
                -webinc ${build.jsp.dir}/webinc.xml
                -webapp ${CFS_HOME} "/>
    </java>
    <mkdir dir="${build.jspclasses.dir}"/>
    <javac srcdir="${build.jsp.dir}" destdir="${build.jspclasses.dir}"
           verbose="off" deprecation="on">
     <classpath>
       <path refid="cfs2.classpath"/>
       <pathelement location="${CFS_HOME}/WEB-INF/lib/darkhorseventures.jar"/>
       <pathelement location="${CFS_HOME}/WEB-INF/lib/aspcfs.jar"/>
       <pathelement location="${CFS_HOME}/WEB-INF/lib/zeroio-iteam.jar"/>
       <pathelement location="${CFS_HOME}/WEB-INF/lib/isavvix.jar"/>
       <pathelement location="${CFS_HOME}/WEB-INF/lib/jcrontab.jar"/>
     </classpath>
     <include name="**/*.java"/>
     <exclude name="**/*_include_jsp.java"/>
    </javac>
  </target>
  
  <!-- Create a WAR -->
  <target name="dist"
          description="Compile, build, and generate web archive"
          depends="classes.prepare,build,dist.archive">
  </target>
  
  <target name="dist.archive" depends="taskdef.jasper">
    <delete dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <!-- Copy the common .jars -->
    <copy todir="${dist.dir}/cfs/WEB-INF/lib">
      <fileset dir="${lib.dir}">
        <include name="*.jar"/>
        <exclude name="ccp_integration.jar"/>
        <exclude name="msbase.jar"/>
        <exclude name="mssqlserver.jar"/>
        <exclude name="msutil.jar"/>
      </fileset>
    </copy>
    <!-- Copy the .jars -->
    <copy todir="${dist.dir}/cfs/WEB-INF/lib">
      <fileset dir="${build.lib.dir}">
        <include name="*.jar"/>
        <exclude name="aspcfs.jar"/>
      </fileset>
    </copy>
    <!-- aspcfs.jar -->
    <jar jarfile="${dist.dir}/cfs/WEB-INF/lib/aspcfs.jar"
          basedir="${build.classes.dir}"
          includes="org/aspcfs/**/*.class"
          excludes="org/aspcfs/modules/setup/actions/SetupServer.class"
    />
    <!-- Copy the web data -->
    <copy todir="${dist.dir}/cfs">
      <fileset dir="${src.web.dir}/jsp">
        <include name="**"/>
      </fileset>
    </copy>
    <copy todir="${dist.dir}/cfs">
      <fileset dir="${src.web.dir}/html">
        <include name="**"/>
      </fileset>
    </copy>
    <copy todir="${dist.dir}/cfs">
      <fileset dir="${src.web.dir}">
        <include name="images/**" />
        <include name="javascript/**" />
        <include name="css/**" />
      </fileset>
    </copy>
    <!-- Copy the configuration files -->
    <copy todir="${dist.dir}/cfs/WEB-INF" verbose="true">
      <fileset dir="${src.web.dir}/WEB-INF">
        <include name="*.xml"/>
        <include name="*.tld"/>
        <exclude name="web.xml"/>
      </fileset>
    </copy>
    <!-- Copy the default preference files -->
    <copy todir="${dist.dir}/cfs/WEB-INF/setup" verbose="true">
      <fileset dir="${pref.dir}/cfs/system">
        <include name="*.xml"/>
      </fileset>
    </copy>
    <!-- Copy the database files -->
    <copy file="${src.sql.dir}/postgresql/postgresql.sql" 
          todir="${dist.dir}/cfs/WEB-INF/setup"/>
    <!-- Copy and compile the reports -->
    <mkdir dir="${dist.dir}/cfs/WEB-INF/reports"/>
    <copy todir="${dist.dir}/cfs/WEB-INF/reports">
      <fileset dir="${src.dir}/jasper_reports">
        <include name="*.xml"/>
      </fileset>
    </copy>
    <compileJasperReport
        srcdir="${dist.dir}/cfs/WEB-INF/reports"
        destdir="${dist.dir}/cfs/WEB-INF/reports"
        compiler="dori.jasper.engine.design.JRBshCompiler"/>
    <delete>
        <fileset dir= "${dist.dir}/cfs/WEB-INF/reports" includes="*.xml"/>
    </delete>
    <!-- Archive the folder -->
    <war destfile="${dist.dir}/darkhorse.war"
         webxml="${src.web.dir}/WEB-INF/web.xml"
         basedir="${dist.dir}/cfs"
         compress="true"
         manifest="${pref.dir}/cfs/war/MANIFEST.MF"
         />
    <!-- Cleanup files -->
    <delete dir="${dist.dir}/cfs"/>
  </target>
  
  <!-- Remove the build folder -->
  <target name="clean"
          description="Delete the temporary build folder used by the install"
          depends="init">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>
  
  <target name="installgk.databasename">
    <property name="DATABASE.NAME" value="${GATEKEEPER.URL}"/>
  </target>
  
  <!-- Install the gatekeeper to store all of the database references -->
  <target name="installgk" depends="init,installgk.databasename,install.prepare"
    description="Create tables for gatekeeper database">
    <echo message="Attempting to create gatekeeper tables and database permissions, the gatekeeper user and database must already have been created at the database."/>
    <sql
        driver="${GATEKEEPER.DRIVER}"
        url="${GATEKEEPER.URL}"
        userid="${GATEKEEPER.USER}"
        password="${GATEKEEPER.PASSWORD}">
      <classpath>
        <path refid="cfs2.classpath"/>
      </classpath>
      <transaction src="${src.sql.dir}/${GATEKEEPER.DBTYPE}/new_gatekeeper.sql"/>
      <transaction src="${build.sql.dir}/gatekeeper.sql"/>
    </sql>
  </target>
  
  <target name="install.prepare.dbname" unless="DATABASE.NAME">
    <!-- Ask for the database name -->
    <input message="Enter database name: " addproperty="DATABASE.NAME"/>
    <!-- Display all information about database here, except password -->
    <echo message="Driver: ${SITE.DRIVER}"/>
    <echo message="URL: ${SITE.URL}${DATABASE.NAME}"/>
    <echo message="Username: ${SITE.USER}"/>
  </target>
  
  <!-- Ask about gatekeeper record -->
  <target name="install.gatekeeper.init" depends="init">
    <input message="Add a gatekeeper site record? "
           validargs="y,n"
           addproperty="SKIP.GATEKEEPER"/>
    <condition property="DATABASE.SKIP_GATEKEEPER">
      <equals arg1="n" arg2="${SKIP.GATEKEEPER}"/>
    </condition>
  </target>
  
  <!-- Prepare files for any database type -->
  <target name="install.prepare.init" depends="init,install.prepare.dbname">
    <!-- Verify database can be overwritten -->
    <input message="The database '${DATABASE.NAME}' will be modified and must already exist, continue? "
           validargs="y,n"
           addproperty="DATABASE.DELETE"/>
    <condition property="ABORT">
      <equals arg1="n" arg2="${DATABASE.DELETE}"/>
    </condition>
    <fail if="ABORT">Build aborted by user.</fail>
    <!-- Determine the database to execute the compatible tasks -->
    <condition property="DBTYPE.POSTGRESQL">
      <equals arg1="${SITE.DBTYPE}" arg2="${POSTGRESQL}" casesensitive="false" trim="true"/>
    </condition>
    <condition property="DBTYPE.MSSQL">
      <equals arg1="${SITE.DBTYPE}" arg2="${MSSQL}" casesensitive="false" trim="true"/>
    </condition>
    <!-- Copy template files to be used -->
    <delete dir="${build.sql.dir}" failonerror="false"/>
    <mkdir dir="${build.sql.dir}"/>
    <copy todir="${build.sql.dir}">
      <fileset dir="${src.sql.dir}/init">
        <include name="*.sql" />
      </fileset>
    </copy>
    <replace file="${build.sql.dir}/gatekeeper.sql" token="@CFS_HOME@" value="${CFS_HOME}"/>
  </target>
  
  <!-- Prepare the PostgreSQL files -->
  <target name="install.check.postgresql" depends="install.prepare.init" if="DBTYPE.POSTGRESQL">
    <replace dir="${build.sql.dir}" token="@TRUE@" value="true">
      <include name="*.sql"/>
    </replace>
    <replace dir="${build.sql.dir}" token="@FALSE@" value="false">
      <include name="*.sql"/>
    </replace>
  </target>
  
  <!-- Prepare the MicrosoftSQL files -->
  <target name="install.check.mssql" depends="install.prepare.init" if="DBTYPE.MSSQL">
    <replace dir="${build.sql.dir}" token="@TRUE@" value="1">
      <include name="*.sql"/>
    </replace>
    <replace dir="${build.sql.dir}" token="@FALSE@" value="0">
      <include name="*.sql"/>
    </replace>
  </target>
  
  <target name="install.prepare" depends="install.check.postgresql,install.check.mssql">
    <echo message="SQL files prepared for database type: ${SITE.DBTYPE}"/>
  </target>
  
  <target name="install.database" depends="init,install.prepare">
    <echo message="Building database"/>
    <!-- TODO: Optionally create database -->
    
    <!-- Create database and initialize data -->
    <sql
        driver="${SITE.DRIVER}"
        url="${SITE.URL}${DATABASE.NAME}"
        userid="${SITE.USER}"
        password="${SITE.PASSWORD}">
      <classpath>
        <path refid="cfs2.classpath"/>
      </classpath>
      <!-- base data -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_cdb.sql"/>
      <transaction src="${build.sql.dir}/cdb.sql"/>
      <transaction src="${build.sql.dir}/code_tables.sql"/>
      <transaction src="${build.sql.dir}/access.sql"/>
      <transaction src="${build.sql.dir}/organization.sql"/>
      <transaction src="${build.sql.dir}/data.sql"/>
      <!-- opportunities -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_opportunity.sql"/>
      <transaction src="${build.sql.dir}/opportunity.sql"/>
      <!-- tickets -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_tms.sql"/>
      <transaction src="${build.sql.dir}/tms.sql"/>
      <!-- custom fields -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_custom_field.sql"/>
      <!-- project management -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_project.sql"/>
      <transaction src="${build.sql.dir}/project.sql"/>
      <!-- communications manager -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_campaign.sql"/>
      <transaction src="${build.sql.dir}/campaign.sql"/>
      <!-- help -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_help.sql"/>
      <!-- synchronization api -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_sync.sql"/>
      <transaction src="${build.sql.dir}/sync.sql"/>
      <!-- autoguide module -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_autoguide.sql"/>
      <transaction src="${build.sql.dir}/autoguide.sql"/>
      <!-- revenue manager -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_revenue.sql"/>
      <transaction src="${build.sql.dir}/revenue.sql"/>
      <!-- task management -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_task.sql"/>
      <transaction src="${build.sql.dir}/task.sql"/>
      <!-- framework data -->
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_workflow.sql"/>
    </sql>
    <delete dir="${build.sql.dir}" failonerror="false"/>
  </target>
  
  <!-- Install permissions -->
  <target name="install.permissions" depends="init,install.prepare">
    <echo message="Process file: ${src.sql.dir}${fs}init${fs}permissions.xml"/>
    <java classname="org.aspcfs.apps.transfer.Transfer" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <pathelement location="${CFS_HOME}/WEB-INF/lib/aspcfs.jar"/>
        <pathelement location="${CFS_HOME}/WEB-INF/lib/darkhorseventures.jar"/>
      </classpath>
      <sysproperty key="processConfigFile" value="${src.sql.dir}${fs}init${fs}permissions.xml"/>
      <sysproperty key="driver" value="${SITE.DRIVER}"/>
      <sysproperty key="url" value="${SITE.URL}${DATABASE.NAME}"/>
      <sysproperty key="user" value="${SITE.USER}"/>
      <sysproperty key="pass" value="${SITE.PASSWORD}"/>
      <arg value="${src.sql.dir}${fs}init${fs}permissions-dataimport.xml"/>
    </java>
  </target>
  
  
  <!-- Upgrade help contents by deleting all help and then inserting -->
  <target name="upgradedb.help" depends="init,install.prepare,install.deletehelp,install.help"/>
  
  <!-- Upgrade help contents by deleting all help and then inserting -->
  <target name="install.deletehelp" depends="init,install.prepare">
    <echo message="Deleting existing help contents..."/>
    <!-- Delete the old help -->
    <sql
        driver="${SITE.DRIVER}"
        url="${SITE.URL}${DATABASE.NAME}"
        userid="${SITE.USER}"
        password="${SITE.PASSWORD}">
      <classpath>
        <path refid="cfs2.classpath"/>
      </classpath>
      <transaction>DROP TABLE help_tips;</transaction>
      <transaction>DROP TABLE help_notes;</transaction>
      <transaction>DROP TABLE help_business_rules;</transaction>
      <transaction>DROP TABLE help_faqs;</transaction>
      <transaction>DROP TABLE help_related_links;</transaction>
      <transaction>DROP TABLE help_features;</transaction>
      <transaction>DROP TABLE lookup_help_features;</transaction>
      <transaction>DROP TABLE help_tableofcontentitem_links;</transaction>
      <transaction>DROP TABLE help_tableof_contents;</transaction>
      <transaction>DROP TABLE help_contents;</transaction>
      <transaction>DROP TABLE help_module;</transaction>
      <transaction src="${src.sql.dir}/${SITE.DBTYPE}/new_help.sql"/>
    </sql>
  </target>
  
  <!-- Install help contents into blank database -->
  <target name="install.help" depends="init,install.prepare">
    <echo message="Installing help contents from: ${src.sql.dir}${fs}init${fs}help.xml"/>
    <java classname="org.aspcfs.apps.help.ImportHelp" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <pathelement location="${CFS_HOME}/WEB-INF/lib/aspcfs.jar"/>
        <pathelement location="${CFS_HOME}/WEB-INF/lib/darkhorseventures.jar"/>
      </classpath>
      <arg value="${src.sql.dir}${fs}init${fs}help.xml"/>
      <arg value="${SITE.DRIVER}"/>
      <arg value="${SITE.URL}${DATABASE.NAME}"/>
      <arg value="${SITE.USER}"/>
      <arg value="${SITE.PASSWORD}"/>
    </java>
  </target>
  
  <!-- Add a site record to the sites table -->
  <target name="install.addsite" depends="init,install.prepare.dbname,install.gatekeeper.init" unless="DATABASE.SKIP_GATEKEEPER">
    <input message="Please enter the virtual host URL for this site, ex &lt;site&gt;.aspcfs.com or 127.0.0.1: " 
           addproperty="SITE.VIRTUAL_HOST"/>
    <sql
        driver="${GATEKEEPER.DRIVER}"
        url="${GATEKEEPER.URL}"
        userid="${GATEKEEPER.USER}"
        password="${GATEKEEPER.PASSWORD}">
      <classpath>
        <path refid="cfs2.classpath"/>
      </classpath>
      <![CDATA[
        INSERT INTO sites (sitecode, vhost, dbhost, dbname, dbuser, dbpw, driver) 
        VALUES ('${SITE.APPCODE}', '${SITE.VIRTUAL_HOST}', '${SITE.URL}${DATABASE.NAME}', '${DATABASE.NAME}', '${SITE.USER}', '${SITE.PASSWORD}', '${SITE.DRIVER}');
      ]]>
    </sql>
    <echo message="Make sure to set ENABLED = TRUE in sites table if events for this site should be processed."/>
  </target>
  
  <!-- Copy the default .XML preferences for this system -->
  <target name="install.copyprefs" depends="init,install.prepare.dbname,taskdef.upgradeDatabase,taskdef.jasper">
    <mkdir dir="${CFS_HOME}/WEB-INF/fileLibrary/${DATABASE.NAME}"/>
    <copy todir="${CFS_HOME}/WEB-INF/fileLibrary/${DATABASE.NAME}">
      <fileset dir="${pref.dir}/cfs/system">
        <include name="*.xml"/>
      </fileset>
    </copy>
    <!-- Install the workflow.xml to the database -->
    <upgradeDatabase
        sitecode="${SITE.APPCODE}"
        driver="${SITE.DRIVER}"
        url="${SITE.URL}${DATABASE.NAME}"
        user="${SITE.USER}"
        password="${SITE.PASSWORD}"
        servletJar="${servletJar}"
        webPath="${CFS_HOME}"
        baseFile="${src.sql.dir}${fs}init${fs}workflow.bsh"
        specificDatabase="${DATABASE.NAME}"
        processSpecifiedDatabaseOnly="true">
    </upgradeDatabase>
  </target>
  
  <!-- Installs a new database -->
  <target name="installdb" depends="log.installdb,install.database,install.permissions,install.help,install.copyprefs,install.addsite"
    description="Create tables, insert base records and permissions into new database, copy XML files">
  </target>
  
  <!-- Programmatically upgrades installed databases for
       the specified appcode and file, runs against the build code,
       not the installed code so that scripts can be run before OR after
       a site has been deployed -->
  <target name="upgradedb.name" unless="arg1">
    <input message="Enter file date to process, include the file extension: " addproperty="arg1"/>
  </target>
  <target name="upgradedb.site" unless="arg2">
    <input message="Enter database to upgrade (dbname must be in [sites] table), leave blank for all: " addproperty="arg2"/>
  </target>
  <target name="upgradedb.uptodate">
    <uptodate property="classes.uptodate">
      <srcfiles dir="${src.classes.dir}" includes="**/*.java"/>
      <mapper type="merge" to="${build.lib.dir}/aspcfs.jar"/>
    </uptodate>
  </target>
  <target name="upgradedb" depends="log.upgradedb,taskdef.upgradeDatabase,taskdef.jasper,upgradedb.name,upgradedb.site,upgradedb.uptodate,build" 
    description="Upgrades all databases in the gatekeeper with a specified script file, for current sitecode">
    <fail unless="arg1">Missing arg1 -- the file to process</fail>
    <fail unless="arg2">Missing arg2 -- the database to process</fail>
    <upgradeDatabase
        sitecode="${GATEKEEPER.APPCODE}"
        driver="${GATEKEEPER.DRIVER}"
        url="${GATEKEEPER.URL}"
        user="${GATEKEEPER.USER}"
        password="${GATEKEEPER.PASSWORD}"
        servletJar="${servletJar}"
        webPath="${CFS_HOME}"
        baseFile="${src.sql.dir}${fs}${SITE.DBTYPE}${fs}upgrade${fs}${arg1}"
        specificDatabase="${arg2}">
    </upgradeDatabase>
  </target>
  
  <!-- Generate Java Docs -->
  <target name="docs" description="Generate JavaDocs" depends="compile">
    <mkdir dir="${build.docs.dir}"/>
    <javadoc sourcepath="${src.classes.dir}"
          packagenames="com.*,org.*"
          destdir="${build.docs.dir}"
          excludepackagenames="javax.servlet">
      <tag name="created" description="Date file was created"/>
      <header>Copyright 2001-2003 Dark Horse Ventures, License Applies</header>
      <footer>Copyright 2001-2003 Dark Horse Ventures</footer>
      <classpath>
        <path refid="cfs2.classpath"/>
        <!--
        <pathelement location="${SRC_LIB}/aspcfs.jar"/>
        -->
      </classpath>
    </javadoc>
  </target>
  
  <!-- General Contact Importer based on CSV spec -->
  <target name="import.generalcontacts" depends="init">
    <fail unless="arg1">Missing arg1: CSV file to import not specified</fail>
    <fail unless="arg2">Missing arg2: Virtual Host to import to not specified</fail>
    <fail unless="arg3">Missing arg3: Import code not specified</fail>
    <mkdir dir="${build.pref.dir}"/>
    <copy file="${pref.dir}/cfs/transfer/import-generalcontacts.xml" todir="${build.pref.dir}" overwrite="true"/>
    <replace file="${build.pref.dir}/import-generalcontacts.xml"
             token="@PROPERTY.FILE@" value="${pref.dir}/cfs/transfer/import-mappings.xml"/>
    <replace file="${build.pref.dir}/import-generalcontacts.xml"
             token="@CSV.FILE@" value="${arg1}"/>
    <replace file="${build.pref.dir}/import-generalcontacts.xml"
             token="@URL@" value="${arg2}"/>
    <replace file="${build.pref.dir}/import-generalcontacts.xml"
             token="@CODE@" value="${arg3}"/>
    <replace file="${build.pref.dir}/import-generalcontacts.xml"
             token="@SYSTEM.ID@" value="4"/>
    <java classname="org.aspcfs.apps.transfer.Transfer" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${CFS_HOME}/WEB-INF/lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <arg value="${build.pref.dir}${fs}import-generalcontacts.xml"/>
    </java>
  </target>
  
  <!-- General Contact Importer based on CSV spec -->
  <target name="import.accountcontacts" depends="init">
    <fail unless="arg1">Missing arg1: CSV file to import not specified</fail>
    <fail unless="arg2">Missing arg2: Virtual Host to import to not specified</fail>
    <fail unless="arg3">Missing arg3: Import code not specified</fail>
    <mkdir dir="${build.pref.dir}"/>
    <copy file="${pref.dir}/cfs/transfer/import-accountcontacts.xml" todir="${build.pref.dir}" overwrite="true"/>
    <replace file="${build.pref.dir}/import-accountcontacts.xml"
             token="@PROPERTY.FILE@" value="${pref.dir}/cfs/transfer/import-mappings.xml"/>
    <replace file="${build.pref.dir}/import-accountcontacts.xml"
             token="@CSV.FILE@" value="${arg1}"/>
    <replace file="${build.pref.dir}/import-accountcontacts.xml"
             token="@URL@" value="${arg2}"/>
    <replace file="${build.pref.dir}/import-accountcontacts.xml"
             token="@CODE@" value="${arg3}"/>
    <replace file="${build.pref.dir}/import-accountcontacts.xml"
             token="@SYSTEM.ID@" value="4"/>
    <java classname="org.aspcfs.apps.transfer.Transfer" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${CFS_HOME}/WEB-INF/lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <arg value="${build.pref.dir}${fs}import-accountcontacts.xml"/>
    </java>
  </target>
  
  <!-- General Contact Importer based on CSV spec -->
  <target name="import.accounts" depends="init">
    <fail unless="arg1">Missing arg1: CSV file to import not specified</fail>
    <fail unless="arg2">Missing arg2: Virtual Host to import to not specified</fail>
    <fail unless="arg3">Missing arg3: Import code not specified</fail>
    <mkdir dir="${build.pref.dir}"/>
    <copy file="${pref.dir}/cfs/transfer/import-accounts.xml" todir="${build.pref.dir}" overwrite="true"/>
    <replace file="${build.pref.dir}/import-accounts.xml"
             token="@PROPERTY.FILE@" value="${pref.dir}/cfs/transfer/import-mappings.xml"/>
    <replace file="${build.pref.dir}/import-accounts.xml"
             token="@CSV.FILE@" value="${arg1}"/>
    <replace file="${build.pref.dir}/import-accounts.xml"
             token="@URL@" value="${arg2}"/>
    <replace file="${build.pref.dir}/import-accounts.xml"
             token="@CODE@" value="${arg3}"/>
    <replace file="${build.pref.dir}/import-accounts.xml"
             token="@SYSTEM.ID@" value="4"/>
    <java classname="org.aspcfs.apps.transfer.Transfer" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${CFS_HOME}/WEB-INF/lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <arg value="${build.pref.dir}${fs}import-accounts.xml"/>
    </java>
  </target>
  
  
  <!-- Test the XML HTTP API -->
  <target name="import.unittest" depends="init">
    <fail unless="arg2">Missing arg2: Virtual Host to import to not specified</fail>
    <fail unless="arg3">Missing arg3: Import code not specified</fail>
    <mkdir dir="${build.pref.dir}"/>
    <copy file="${pref.dir}/cfs/transfer/import-unittest.xml" todir="${build.pref.dir}" overwrite="true"/>
    <replace file="${build.pref.dir}/import-unittest.xml"
             token="@URL@" value="${arg2}"/>
    <replace file="${build.pref.dir}/import-unittest.xml"
             token="@CODE@" value="${arg3}"/>
    <replace file="${build.pref.dir}/import-unittest.xml"
             token="@SYSTEM.ID@" value="4"/>
    <java classname="org.aspcfs.apps.transfer.Transfer" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${CFS_HOME}/WEB-INF/lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <arg value="${build.pref.dir}${fs}import-unittest.xml"/>
    </java>
  </target>
  
  
  
  
  
  
  
  
  
  
  <!-- MISC STUFF TO GO THROUGH (AND MOVE SOMEWHERE ELSE) -->
  <target name="run.databasetest" depends="init,install.prepare">
    <java classname="org.aspcfs.apps.test.Database" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <pathelement location="${CFS_HOME}/WEB-INF/lib/aspcfs.jar"/>
        <pathelement location="${CFS_HOME}/WEB-INF/lib/darkhorseventures.jar"/>
      </classpath>
      <sysproperty key="file" value="${arg1}"/>
      <sysproperty key="driver" value="${SITE.DRIVER}"/>
      <sysproperty key="url" value="${SITE.URL}${DATABASE.NAME}"/>
      <sysproperty key="user" value="${SITE.USER}"/>
      <sysproperty key="pass" value="${SITE.PASSWORD}"/>
    </java>
  </target>
  
  <!-- Run KBB Vehicle Import -->
  <target name="run.parsekbb" depends="init,install.prepare">
    <java classname="org.aspcfs.modules.media.autoguide.utils.ParseKBB" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <pathelement location="${CFS_HOME}/WEB-INF/lib/aspcfs.jar"/>
        <pathelement location="${CFS_HOME}/WEB-INF/lib/darkhorseventures.jar"/>
      </classpath>
      <sysproperty key="file" value="${arg1}"/>
      <sysproperty key="driver" value="${SITE.DRIVER}"/>
      <sysproperty key="url" value="${SITE.URL}${DATABASE.NAME}"/>
      <sysproperty key="user" value="${SITE.USER}"/>
      <sysproperty key="pass" value="${SITE.PASSWORD}"/>
    </java>
  </target>
  
  
  <!-- Run Net Decisions import (one-time process) -->
  <target name="run.netdecisions" depends="init">
    <java classname="org.aspcfs.apps.transfer.Transfer" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${CFS_HOME}/WEB-INF/lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <arg value="${bin.dir}${fs}netDesc-loadAccounts.xml"/>
    </java>
  </target>
  
  <!-- Test the EDIT transaction server -->
  <target name="run.edit" depends="init">
    <java classname="org.aspcfs.modules.healthcare.edit.apps.HttpPostTransaction" fork="yes" failonerror="yes">
      <classpath>
        <path refid="cfs2.classpath"/>
        <fileset dir="${CFS_HOME}/WEB-INF/lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <arg value="${arg1}"/>
      <arg value="${arg2}"/>
    </java>
  </target>
</project>
