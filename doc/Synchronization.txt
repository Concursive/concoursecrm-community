/**
 *  Client/Server Synchronization (DRAFT)
 *
 *@author     mrajkowski
 *@created    April 16, 2002
 *@version    $Id$
 */

This protocol requires that the server and each client are able to keep 
track of changes that have happened between synchronizations. 

To specify the changed data items, unique identifiers are used per client.
Any data added to the client will use an identity that is unique to that
client only.  The server will need to manage the differences between clients
and make sure the IDs used on each client map correctly to the data stored
on the server.  When the server sends new data to the client, the client will
need to specify an ID to begin with.

To indicate the type of modification, different actions are specified within
a transaction.  Actions include: insert, update, delete, and sync.

Sync anchors are used to enable sanity checks for synchronization. A sync anchor 
is a date/time when the last synchronization was completed, stored on both 
the client and server.  These must match for the systems to be in sync.

In this approach, the client drives the whole synchronization process.

The client will be responsible for specifying the order of synchronization events
based on the sync table.

When data is being transferred, a limit needs to be specified by the client so 
that the server does not send too many records back to the client in a single 
transaction.  Some clients can handle an enormous amount of data, while handhelds
cannot.

  

The synchronization process:

---[ INITIATE DATA SYNCHRONIZATION ]---

Client #1 Configures its internal clock
- Client sends transaction to get the time
- This will be used as the "nextAnchor" for the current session of transactions
- An XML record is returned with a field called "dateTime"
  Ex. "2002-05-28 16:34:20.167"
  
<?xml version="1.0" standalone="yes"?>
<app>
  <authentication>
    <id>ds21.darkhorseventures.com</id>
    <code>BZTST27A</code>
    <systemId>2</systemId>
  </authentication>
  <transaction id="1">
    <syncClient action="getDateTime"/>
  </transaction>
</app>


Client #1 Logs into the server
- Client sends transaction with username and password
- The User's validated ID will be returned if valid (status == 0)
- An error (status == 1) will be returned if invalid

<app>
  <authentication>
    <id>ds21.darkhorseventures.com</id>
    <code>BZTST27A</code>
    <systemId>2</systemId>
  </authentication>
  <transaction id="2">
    <meta>
      <property>id</property>
    </meta>
    <user action="select">
      <username>* PUT USER'S NAME *</username>
      <password>* PUT USER'S PASSWORD *</password>
    </user>
  </transaction>
</app>

Client #1 Registers its device
- Client sends transaction with device registration information
- The client will receive a new id that allows the server to uniquely
  identify this client.  Only needs to be done once, or if the client
  is re-initialized.

<app>
  <authentication>
    <id>ds21.darkhorseventures.com</id>
    <code>BZTST27A</code>
    <systemId>2</systemId>
  </authentication>
  <transaction id="3">
    <meta>
      <property>id</property>
    </meta>
    <syncClient action="insert">
      <type>PocketPC 2002</type>
      <version>20020420001</version>
      <enteredBy>* PUT USER'S ID (FROM ABOVE) HERE*</enteredBy>
    </syncClient>
  </transaction>
</app>

Client #1 Prepares for Synchronization
- Client reads local Sync Anchor (Last Anchor) from internal database
  Initially the anchor is null, but will be a date/time in future syncs
- Client sends transaction to find out if synchronization is ok

<?xml version="1.0" standalone="yes"?>
<app>
  <authentication>
    <id>ds21.darkhorseventures.com</id>
    <code>BZTST27A</code>
    <systemId>2</systemId>
    <clientId>*PUT CLIENT ID HERE*</clientId>
    <lastAnchor/>
    <nextAnchor>*INSERT NEXT ANCHOR HERE*</nextAnchor>
  </authentication>
  <transaction id="4">
    <syncClient action="syncStart"/>
  </transaction>
</app>

- Server compares anchors, if not a match then a previous synchronization error
  may have occurred and returns (status == 1) response, 
  otherwise returns (status == 0) response if ready to go.
- If an error response, then we need to do a complete sync... not sure what the
  process is yet.

---[ BEGIN CLIENT DATA SYNCHRONIZATION ]---
All changes can be requested and sent in a single transaction, or separated.  
The order in which tables are processed is important for referential data.
Initially the client will not have any data to send, it will need to load
all data.  If it has data, then it can do inserts, updates, and deletes.
Deletes need to be done from the last table synchronized instead of the first.
Look at the object-XML-mapping document for details on specific objects.

Client #1 Sends records for insert with GUID... one or all records
- Client sends transaction and command in body
- Server looks in mapping table, if GUID does not exist then continues
- Server inserts item into corresponding table
- Server inserts GUID, tableId, and recordId into client mapping table
   clientId | GUID | tableId | RecordId
- Server responds with success

Client #1 Sends records for update with GUID... one or all records
- Client sends transaction and command in body
- Server looks up ClientId and GUID to get RecordId to be updated
- Server sets the RecordId of the record
- Server updates the record
- Server responds with success

Client #1 Sends records for delete with GUID...
- Client sends transaction and command in body
- Server looks up ClientId and GUID to get RecordId to be deleted
- Server sets the RecordId of the record
- Server deletes the record
- Server deletes the ClientId/GUID record in client mapping table
- Server responds with success

---[ BEGIN SERVER DATA SYNCHRONIZATION ]---
All changes can be requested and sent in a single transaction, or separated.  
The order in which tables are processed is important for referential data.

Client #1 Either requests a list of tables to be synchronized, or
iterates through its cached table list from the database initialization
- Client sends Last Anchor and Next Anchor to server in authentication block
- Client sends transaction and command in body, along with start ID, offset, 
and limit.
- Server determines the updates, inserts, and deletes for the specified table
- Server sends record(s) to client with appropriate command and GUID
- Server inserts GUID into client mapping table (if not already there)
- Client processes the received data, performing the appropriate SQL
- Client sends next table to be synchronized

<app>
  <authentication>
    <id>ds21.darkhorseventures.com</id>
    <code>BZTST27A</code>
    <systemId>2</systemId>
    <clientId>*INSERT CLIENT ID*</clientId>
    <lastAnchor>*INSERT LAST ANCHOR OR NULL</lastAnchor>
    <nextAnchor>*INSERT NEXT ANCHOR HERE*</nextAnchor>
  </authentication>
  <transaction id="10">
    <meta>
      <property>guid</property>
      <property>name</property>
      <property>enteredBy</property>
      <property>modified</property>
      <property>modifiedBy</property>
    </meta>
    <makeList action="sync" identity="1" offset="0" items="50"/>
  </transaction>
</app>

Identity is the client's (max Id + 1) in which records will be inserted at
Offset is the record count to begin downloading from
Items is the max number of records that should be returned on this request

Response includes:
<recordSet name="makeList" count="50" total="4824">

In the next client request, add from the previous request (items + offset) to 
get the new offset. So:
<makeList action="sync" identity="51" offset="50" items="50"/>

---[ FINALIZE DATA SYNCHRONIZATION ]---

Client #1 Ends Synchronization
- Client sets Sync Anchor to Next Anchor in local System table
- Client updates Anchor on Server with Next Anchor command
- Server deletes records flagged in client mapping table since they should
  no longer be on the client

<app>
  <authentication>
    <id>ds21.darkhorseventures.com</id> 
    <code>BZTST27A</code> 
    <systemId>2</systemId>
    <clientId>*PUT YOUR ID HERE*</clientId>
  </authentication>
  <transaction id="14">
    <syncClient action="update">
      <id>*PUT YOUR ID HERE*</id>
      <anchor>*PUT ANCHOR TO STORE ON SERVER (the nextAnchor that was used) *</anchor>
    </syncClient>
  </transaction>
</app>




** Object Properties **

  <authentication>
    <id>ds21.darkhorseventures.com</id> 
    <code>BZTST27A</code>
    <systemId>2</systemId>
    <clientId>93</clientId>
    <lastAnchor/>
    <nextAnchor>2002-5-2 20:12:26</nextAnchor>
  </authentication>
  
  <transaction id="1">
    <meta>
      <property>guid</property>
      <property>name</property>
      <property>enteredBy</property>
      <property>modified</property>
      <property>modifiedBy</property>
    </meta>
    <accountList action="sync" identity="1"/>
  </transaction>
  
  <transaction id="2">
    <meta>
      <property>guid</property>
      <property>name</property>
      <property>modified</property>
    </meta>
    <optionList action="sync" identity="1"/>
  </transaction>
  
  <transaction id="3">
    <meta>
      <property>guid</property>
      <property>name</property>
      <property>enteredBy</property>
      <property>modified</property>
      <property>modifiedBy</property>
    </meta>
    <makeList action="sync"/>
  </transaction>

  <transaction id="4">
    <meta>
      <property>guid</property>
      <property>name</property>
      <property>make.guid</property>
      <property>enteredBy</property>
      <property>modified</property>
      <property>modifiedBy</property>
    </meta>
    <modelList action="sync"/>
  </transaction>
  
  <transaction id="5">
    <meta>
      <property>guid</property>
      <property>year</property>
      <property>make.guid</property>
      <property>model.guid</property>
      <property>enteredBy</property>
      <property>modified</property>
      <property>modifiedBy</property>
    </meta>
    <vehicleList action="sync">
      <year>*Optionally specify a specific year to receive, or remove this attribute*</year>
    </vehicleList>
  </transaction>


...Client inserts a vehicle with options and ad runs (MUST HAVE
SYNC'D ALL TABLES FIRST):

<?xml version="1.0" standalone="yes"?> 
<app>
  <authentication>
    <id>ds21.darkhorseventures.com</id>
    <code>BZTST27A</code> 
    <systemId>2</systemId>
    <clientId>*PUT YOUR ID HERE*</clientId>
    <lastAnchor/>
    <nextAnchor>2002-04-27 14:30:30</nextAnchor>
  </authentication>
  <transaction id="11">
    <accountInventory action="insert">
      <guid>10</guid>
      <vehicleGuid>1089</vehicleGuid>
      <accountGuid>5</accountGuid>
      <enteredBy>*USER'S ID*</enteredBy>
      <stockNo>aaa</stockNo>
      <mileage>123</mileage>
      <vin>XCV</vin>
      <sellingPrice>1234</sellingPrice>
      <exteriorColor>red</exteriorColor>
      <condition>condition</condition>
      <comments>additional text</comments>
      <sold>false</sold>
    </accountInventory>
    <option action="insert">
      <guid>1</guid>
      <accountInventoryGuid>10</accountInventoryGuid>
    </option>
    <option action="insert">
      <guid>2</guid>
      <accountInventoryGuid>10</accountInventoryGuid>
    </option>
    <option action="insert">
      <guid>3</guid>
      <accountInventoryGuid>10</accountInventoryGuid>
    </option>
    <adRun action="insert">
      <guid>1</guid>
      <accountInventoryGuid>10</accountInventoryGuid>
      <runDate>2002-05-10</runDate>
      <adTypeGuid>3</adTypeGuid>
      <includePhoto>true</includePhoto>
      <enteredBy>10</enteredBy>
    </adRun>
    <adRun action="insert">
      <guid>2</guid>
      <accountInventoryGuid>10</accountInventoryGuid>
      <runDate>2002-05-17</runDate>
      <adTypeGuid>3</adTypeGuid>
      <includePhoto>false</includePhoto>
      <enteredBy>10</enteredBy>
    </adRun>
  </transaction>
</app>

