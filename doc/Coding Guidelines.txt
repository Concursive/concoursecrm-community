/**
 *  Coding Guidelines (Draft)
 *
 *@author     matt rajkowski
 *@created    August 26, 2002
 *@version    $Id$
 */

Commenting Code:
  - Comment code using JavaDoc style
  - Each class should have "@author" "@created" and "@version" tags
  
Working with Java Objects:
  When implementing object specific code, consider creating generic
  and reuseable code that other objects can use.
  
  Objects tend to map to real world processes and things
  - Think about the object irrespective of the data store
  - Consider the properties that make up an object
  - Object properties should be private or protected, never public.
    This ensures that other code will retrieve the properties as intended.
    Use protected if the object will be extended.
  - Good default values for various variable types are:
    String = null;
    int = -1;
  - For methods and properties, do not use "_" in the name.
    Ex: private String firstName = null;
        public String getFirstName()
  
  String vs. StringBuffer
  - Use StringBuffer when appending multiple strings together
  - Use String when not appending multiple strings together
  
  JDBC
  - Use PreparedStatement whenever a query will have unique IDs.
    Ex. "DELETE FROM campaign WHERE campaign_id = ?"
  
Variable Names:
  - Use meaningful names: object variables tend to be nouns, 
    methods tend to be verbs
    Ex. getDynamicForm(String formName) instead of getDynamicForm(String which)
        unless which is documented
    
CSS:
  - Each html element should have its own CSS class.
    Ex. The classes "containerHeader", "containerMenu", "containerBack", 
        "containerBody" make up the color and layout scheme for module sub-menus.
        You wouldn't want to use these for other page elements.
    
HTML:
  - It is proper to put all attributes in double quotes.  Do not use single quotes
    since this will cause a problem when using strings.
    Ex. <td width="125" valign="center" nowrap class="formLabel">
  - Html links should not have a "/" before the URL.  This will allow CFS
    to be used as the root site and a sub-site.  Java URL resources, however,
    need the "/" before the URL.
    Ex. In cfs-config.xml use: resource="/Process.do?command=whatever"
    Ex. In HTML use <a href="Process.do?command=whatever">
    
MVC Modules:
  - Modules need to handle exceptions and should not throw exceptions.
    When an exception occurs in a module, catch it and store it in the
    request so that all errors can be logged and a nice message can be presented
    to the user.
    All code that could cause an exception should be trapped.
  - Use database connections efficiently... when a connection is needed
    retrieve one from the pool, do operations, then free it for another
    user or process to use.


