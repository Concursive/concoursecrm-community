/**
 *  ASPCFS Server Installation
 *  Configured for Red Hat 8.0, Postgresql 7.2.3, and Tomcat 4.1.12/.24
 *
 *@author     matt rajkowski
 *@created    October 9, 2002
 *@version    $Id$
 */


*** Software Installation ***

- Install Red Hat 8.0
  Purpose: Operating system
  http://www.redhat.com
  - Configure to boot up to shell
  - If uncomfortable, choose Custom Install (Everything),
    otherwise install at least the following packages (to be revised):
      - Gnome (not KDE)
      - Server stuff (mail, firewall, ssh, ssl)
      - Developer tools (make, etc)
      - Text based browsers (links, lynx)
      - Do not install Red Hat PostgreSQL
  - Configure IP
  - Turn on port 80 and 443 during install or in iptables later

- Install Postgresql 7.2.3 RPMS for Red Hat 8.0 (not 7.3.1+ yet)
  Purpose: Database server
  http://www.postgresql.org
  destination: /var/lib/pgsql
  $ rpm --install [files]

- Install Java2 SDK 1.4.1 RPM for Linux
  Purpose: Programming language just-in-time compiler, 
    required for executing Java applications
  http://java.sun.com
  file: 2sdk-1_4_1-fcs-linux-i586.rpm
  destination: /usr/java/j2sdk1.4.1
  $ rpm --install [file]
  $ ln -s /usr/java/j2sdk1.4.1 /usr/java/j2se

- Install Apache Tomcat 4.1.12 or 4.1.24 binary (nothing inbetween)
  Purpose: Web Server
  http://jakarta.apache.org 
  file: jakarta-tomcat-4.1.24-LE-jdk14.tar.gz
  destination: /usr/java/jakarta-tomcat-4.1.24-LE-jdk14
  $ tar -xvzf jakarta-tomcat-4.1.24-LE-jdk14.tar.gz
  $ ln -s /usr/java/jakarta-tomcat-4.1.24-LE-jdk14 /usr/java/tomcat
  
- Install Apache Ant 1.5.1 binary
  Purpose: Deployment utility for compiling and deploying ASPCFS
  http://jakarta.apache.org
  file: jakarta-ant-1.5.1-bin.tar.gz
  destination: /usr/java/jakarta-ant-1.5.1
  $ tar -xvzf jakarta-ant-1.5.1-bin.tar.gz
  $ ln -s /usr/java/jakarta-ant-1.5.1 /usr/java/ant

- Install HtmlDoc 1.8.23 from source code
  Purpose: Converts HTML pages to Postscript for ASPCFS
  http://www.easysw.com/htmldoc/
  file: htmldoc-1.8.23-source.tar.gz
  $ tar -xvzf htmldoc-1.8.23-source.tar.gz
  $ cd htmldoc-1.8.23
  $ ./configure
  $ make
  $ make install

- Install HylaFax 4.1.5 RPM for Red Hat 8.0 
  Purpose: Fax client for sending documents to fax server
  http://www.hylafax.org
  file: hylafax-4.1.5-1rh8.i386.rpm
    $ rpm --install [file]
  # If error about conflicting mgetty-sendfax, issue the following command:
    $ rpm --erase mgetty-sendfax
  # NOTE: On the FAX SERVER, the ip and domain name must be added to:
  #   /etc/hosts
  #   /var/spool/hylafax/etc/hosts.faxd



*** Software Configuration ***

- Configure OS environment (as root)
  # Create a group called "cfs"
    $ vigr
  # Add users to the system:
    $ adduser cfsdba
    $ adduser [your name] -g cfs
    $ passwd [your name]
  # Add [your name] to sudo users:
    $ visudo

  # Add the following to the bottom of /etc/profile:
    export JAVA_HOME=/usr/java/j2se
    export ANT_HOME=/usr/java/ant
    PATH=$PATH:${JAVA_HOME}/bin:${ANT_HOME}/bin
    export CATALINA_HOME=/usr/java/tomcat
    export CATALINA_OPTS=-Djava.awt.headless=true
    export CFS_HOME=/home/webapps/ROOT

  # Remove the GNU Java if installed (only if KDE was installed)
    $ rm /usr/bin/java
    $ rm /usr/bin/javac
    
  # Make the web folders
    $ mkdir /home/webapps
    $ mkdir -m 2775 /home/webapps/ROOT
    $ chown .cfs /home/webapps/ROOT
    
  # Log back in as root for changes to take effect, then test:
  # Java version should say: 
  #   Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.1-b21)
    $ java -version
  # Ant version should say: Apache Ant version 1.5.1 compiled on October 2 2002
    $ ant -version

- Configure Apache Tomcat Web Server
  # Setup tomcat as a service, so that it auto-starts on boot
    $ cp /usr/java/tomcat/bin/catalina.sh /etc/init.d/tomcat
    $ vi /etc/init.d/tomcat
  
  # Edit the top of the file to look like the following, the additional
    lines are the chkconfig, description, and processname:
  

    #!/bin/sh
    # -----------------------------------------------------------------------------
    # Start/Stop Script for the CATALINA Server
    #
    # chkconfig: - 85 15
    # description: Tomcat is a World Wide Web server.  It is used to serve \
    #              JSP files and CGI.
    # processname: tomcat
    #

    
  # Right before the line "# Get standard Java environment variables" add the line:
    source /etc/profile
  # Delete the line that reads "CATALINA_HOME=`cd "$PRGDIR/.." ; pwd`"
  # Save and exit
    
  # Setup tomcat to start when server starts up
    $ chkconfig --level 2345 tomcat on
    
  # Allow users to add libraries to Tomcat
    $ chmod 2775 ${CATALINA_HOME}/common/lib
    $ chown .cfs ${CATALINA_HOME}/common/lib/*
    
  # Make sure Apache Web Server is not installed or running
    $ service httpd stop
    $ chkconfig --level 2345 httpd off
    
  # Test the web server, Tomcat welcome page should show in browser:
    $ service tomcat start
    $ links http://127.0.0.1:8080

    
- Configure Postgresql
  # Initialize the database by starting the service the first time:
    $ service postgresql start
  
  # Configure postgresql to start when server starts up
    $ chkconfig --level 2345 postgresql on

  # Configure Postgresql connections, make sure any connecting servers are allowed,
  # like a backup server.
    $ service postgresql stop
    $ cd /var/lib/pgsql/data
    $ vi pg_hba.conf
  # Verify this line is uncommented: 
    host all 127.0.0.1 255.255.255.255 trust
  # Add the backup server
    host all 216.54.81.126 255.255.255.255 trust
  # Save and exit

  # Configure Postgresql to accept TCP/IP connections
    $ vi postgresql.conf
  # Uncomment and change the following line:
    tcpip_socket = true
  # Save and exit

  # Start the server
    $ service postgresql start

  # Create the initial user
    $ su postgres
  # Respond y,y
    $ createuser cfsdba
    $ createuser [your name]
  # Respond n,n
    $ createuser gatekeeper
    $ exit

    
- Configure Sendmail
  # Make sure sendmail is running on startup
    $ chkconfig --level 2345 sendmail on
  # Edit sendmail configuration to allow emails to be sent from any domain user.
  # The default already allows localhost to RELAY, do not put other domains or
  # mail will be used by spammers.
  # Running the following command will report any errors, if postfix is used
  # instead of sendmail
    $ postfix check
    

- Install ASPCFS
  # Login as your own username
    $ cvs -d :pserver:username@216.54.81.126:/usr/local/cvs login
    $ cvs -d :pserver:username@216.54.81.126:/usr/local/cvs checkout cfs2
    $ cd ~/cfs2
  
  # Configure the web server
    $ sudo cp pref/apache/tomcat4.1/conf/web.xml ${CATALINA_HOME}/conf/
    $ sudo cp pref/apache/tomcat4.1/conf/server.xml ${CATALINA_HOME}/conf/
    $ sudo vi ${CATALINA_HOME}/conf/server.xml #make changes per on-screen directions
  
  # Install the software (Follow on-screen messages until BUILD SUCCESSFUL)
    $ ant deploy
  
  # Install the gatekeeper
    $ createdb cfs2gk
    $ ant installgk

  # Create the initial cfs database
    $ createdb cdb_[company abbreviation]
  # Install the database
    $ ant installdb
  
  # Reload tomcat, must call stop and then start
    $ sudo /sbin/service tomcat stop
    $ sudo /sbin/service tomcat start
  
  # Test ASPCFS, should see login prompt or message to use secure login
    $ mozilla http://127.0.0.1
  # Test SSL ASPCFS, should see Security Alert due to not having a signed cert,
  # choose to proceed, then you should see login prompt
    $ mozilla https://127.0.0.1

- Setup cron items (as root)
  # There are several tasks to keep ASPCFS running... eventually the ASPCFS
  # items will be integrated into the ASPCFS application
    $ sudo crontab -e
  
# Clean up graphs and data every night
1 3 * * * /usr/bin/lynx -dump http://127.0.0.1/ProcessSystem.do?command=ClearGraphData > /dev/null


*** Software Maintenace ***

Even though the production server uses RAID, it is important that the database 
is remotely backed up, as well as the file library.  There are several ways to
handle this, the simplest being a download of the database that can be restored
to the same server or other servers fairly easily.

- On a remote server, install Postgresql from the RPMs
- Copy the backup.sh from the ASPCFS distribution into /var/lib/pgsql
- For the corresponding Postgresql version number, copy the following files into
  /var/lib/pgsql/ so that the backup is compatible with future versions of postgresql
  $ cp /usr/bin/pg_dump /var/lib/pgsql/pg_dump723
  $ cp /usr/bin/pg_dumpall /var/lib/pgsql/pg_dumpall723
  $ cp /usr/bin/psql /var/lib/pgsql/psql723
  
  # Change all instances of: 
  #  pg_dump to pg_dump723, 
  #  pg_dumpall to pg_dumpall723
  #  psql to psql723
  # in the following files:
  $ vi pg_dump723
  $ vi pg_dumpall723
  
- Then you need to setup a cron task with the following

# Backup all the remote datebases for a server, and keep a 7 day rolling backup
# The first parameter after backup.sh is the Postgresql version to backup from,
# 723 matches Postgresql 7.2.3
37 4 * * * su postgres -c "/var/lib/pgsql/backup.sh 723 aspcfs.darkhorseventures.com all `date +%a`"


