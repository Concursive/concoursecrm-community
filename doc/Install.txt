/**
 *  ASPCFS Server Installation
 *  Configured for Red Hat 9.0, Postgresql 7.2.3, and Tomcat 4.1.24
 *
 *@author     matt rajkowski
 *@created    October 9, 2002
 *@version    $Id$
 */


*** Software Installation ***

- Install Red Hat 9
  Purpose: Operating system
  http://www.redhat.com
  - Configure to boot up to shell
  - If uncomfortable, choose Custom Install (Everything),
    otherwise install at least the following packages (to be revised):
      - X Windows System
      - Gnome Desktop Environment
      - Graphical Internet
      - Text-based Internet (Lynx)
      - Editors
      - Mail Server
      - SQL Database Server (PostgreSQL (v7.3.2))
      - Development Tools
      - Administration Tools
      - System Tools
      - Printing Support
  - Configure IP
  - Turn on port 80 and 443 during install or in iptables later
    - iptables must be edited later to allow DNS using lokkit

[root user]
    
- Install Java2 SDK 1.4.1_03 RPM for Linux
  Purpose: Programming language just-in-time compiler, 
    required for executing Java applications
  http://java.sun.com
  file: 2sdk-1_4_1_03-fcs-linux-i586.rpm.bin
  destination: /usr/java/j2sdk1.4.1_03
  $ chmod a+x 2sdk-1_4_1_03-fcs-linux-i586.rpm.bin
  $ ./2sdk-1_4_1_03-fcs-linux-i586.rpm.bin
  $ rpm --Uvh 2sdk-1_4_1_03-fcs-linux-i586.rpm
  $ ln -s /usr/java/j2sdk1.4.1_03 /usr/java/j2se

- Install Apache Tomcat 4.1.24 binary
  Purpose: Web Server
  http://jakarta.apache.org 
  file: jakarta-tomcat-4.1.24-LE-jdk14.tar.gz
  destination: /usr/java/jakarta-tomcat-4.1.24-LE-jdk14
  $ tar -xvzf jakarta-tomcat-4.1.24-LE-jdk14.tar.gz
  $ ln -s /usr/java/jakarta-tomcat-4.1.24-LE-jdk14 /usr/java/tomcat
  
- Install Apache Ant 1.5.3 binary
  Purpose: Deployment utility for compiling and deploying ASPCFS
  http://jakarta.apache.org
  file: jakarta-ant-1.5.3-bin.tar.gz
  destination: /usr/java/jakarta-ant-1.5.3
  $ tar -xvzf jakarta-ant-1.5.3-bin.tar.gz
  $ ln -s /usr/java/jakarta-ant-1.5.3 /usr/java/ant

- Install HtmlDoc 1.8.23 from source code
  Purpose: Converts HTML pages to Postscript for ASPCFS
  http://www.easysw.com/htmldoc/
  file: htmldoc-1.8.23-source.tar.gz
  $ tar -xvzf htmldoc-1.8.23-source.tar.gz
  $ cd htmldoc-1.8.23
  $ ./configure
  $ make
  $ make install

- Install HylaFax 4.1.5 RPM for Red Hat 9 
  Purpose: Fax client for sending documents to fax server
  http://www.hylafax.org
  file: hylafax-4.1.6-1rh9.i386.rpm
    $ rpm --install [file]
  # If error about conflicting mgetty-sendfax, issue the following command:
    $ rpm --erase mgetty-sendfax
  # If error about failed dependency sharutils, insert Red Hat CD3 and issue the 
    following command:
    $ rpm --install /mnt/cdrom/RedHat/RPMS/sharutils-4.2.1-14.i386.rpm
  # NOTE: On the FAX SERVER, the ip and domain name must be added to:
  #   /etc/hosts
  #   /var/spool/hylafax/etc/hosts.hfaxd



*** Software Configuration ***

[root user]

- Configure OS environment
  # Create a user called "cfs" and give permissions to anyone in that group
    $ adduser cfs
    $ chmod ug+rw /home/cfs
    $ chmod 2775 /home/cfs
    $ chown .cfs /home/cfs
  # Add users to the system:
    $ adduser cfsdba
    $ adduser [your name] -g cfs
    $ passwd [your name]
  # Add [your name] to sudo users:
    $ visudo

  # Add the following to the bottom of /etc/profile:
    export JAVA_HOME=/usr/java/j2se
    export ANT_HOME=/usr/java/ant
    export PATH=$PATH:${JAVA_HOME}/bin:${ANT_HOME}/bin
    export CATALINA_HOME=/usr/java/tomcat
    export CATALINA_OPTS=-Djava.awt.headless=true
    export CFS_HOME=/home/cfs/webapps/ROOT

  # Remove the GNU Java if installed (only if KDE was installed)
    $ rm /usr/bin/java
    $ rm /usr/bin/javac
    
  # Log back in as root for changes to take effect, then test:
  # Java version should say: 
  #   Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.1-b21)
    $ java -version
  # Ant version should say: Apache Ant version 1.5.1 compiled on October 2 2002
    $ ant -version

- Configure Postgresql
  # Initialize the database by starting the service the first time:
    $ service postgresql start
  
  # Configure postgresql to start when server starts up
    $ chkconfig --level 2345 postgresql on

  # Configure Postgresql connections, make sure any connecting servers are allowed,
  # like a backup server.
    $ service postgresql stop
    $ cd /var/lib/pgsql/data
    $ vi pg_hba.conf
  # Uncomment the following line: 
    host all 127.0.0.1 255.255.255.255 trust
  # Add a remote backup server if you have one
    host all [remote-ip-addr] 255.255.255.255 trust
  # Save and exit

  # Configure Postgresql to accept TCP/IP connections
    $ vi postgresql.conf
  # Uncomment and change the following line:
    tcpip_socket = true
  # Save and exit

  # Start the server
    $ service postgresql start

  # Create the initial users
    $ su postgres
  # Add the following users and respond "y" to each question asked
    $ createuser cfsdba
    $ createuser [your name]
  # Add the following user and respond "n" to each question asked
    $ createuser gatekeeper
    $ exit

    
- Configure Sendmail
  # Make sure sendmail is running on startup
    $ chkconfig --level 2345 sendmail on
  # Edit sendmail configuration to allow emails to be sent from any domain user.
  # The default already allows localhost to RELAY
    $ cd /etc/mail
    $ vi access
      # Add a line with any of your e-mail domains... the part after the @
      darkhorseventures.com  RELAY
      # Save file and exit
    $ make

[user]
      
- Install ASPCFS
  # Login as your own username
  
  # Get a copy of the CFS source code or download from cvs
    $ cd ~
    $ tar -xvjf cfs2.tar.bz2
    $ cd cfs2
    -- OR --
    $ cvs -d :pserver:username@216.54.81.126:/usr/local/cvs login
    $ cvs -d :pserver:username@216.54.81.126:/usr/local/cvs checkout cfs2
    $ cd ~/cfs2
  
  # Configure the web server with default settings
    $ sudo cp pref/apache/tomcat4.1/conf/web.xml ${CATALINA_HOME}/conf/
    $ sudo cp pref/apache/tomcat4.1/conf/server.xml ${CATALINA_HOME}/conf/
    $ sudo cp pref/apache/tomcat4.1/init.d/tomcat /etc/init.d/tomcat
    $ sudo chmod a+x /etc/init.d/tomcat
  
  # Setup tomcat to start when server starts up
    $ sudo /sbin/chkconfig --level 2345 tomcat on
    
  # Make sure Apache Web Server is not installed or running
  # If stopping shows an error, then it's probably not installed
    $ sudo /sbin/service httpd stop
    $ sudo /sbin/chkconfig --level 2345 httpd off
    
  # Install the CFS software, make sure to follow on-screen messages until 
  # "BUILD SUCCESSFUL" message is shown
    $ ant deploy
  # First time setup will show an error, but now the base files are in place,
  # so edit the properties file to configure CFS for this server
    $ vi ${CFS_HOME}/WEB-INF/build.properties
  # Try deploying again and see if "BUILD SUCCESSFUL" message is shown
    $ ant deploy
  
  # Install the gatekeeper
    $ createdb -E UNICODE cfs2gk
    $ ant installgk

  # Create the initial cfs database
    $ createdb -E UNICODE cdb_[company abbreviation]
  # Install the database, answer the database question with the
  # same cdb_[company abbreviation] that was used to create the database
    $ ant installdb
  
  # Load tomcat, must call stop and then start
    $ sudo /sbin/service tomcat start
  
  # Test ASPCFS, should see login prompt or message to use secure login
    $ lynx http://127.0.0.1
  # Test SSL ASPCFS, should see Security Alert due to not having a signed cert,
  # choose to proceed, then you should see login prompt
    $ lynx https://127.0.0.1
    
  # INSTALLATION IS COMPLETE... restart the server and make sure everything
  # loads on startup.  You can log into the server and try accessing the
  # home page again to make sure.
  
  
  
*** Creating an initial user account ***
  *** NOT IMPLEMENTED YET ***
  # Now that the database is installed, add a CFS user by executing the following
  # command, and answering the questions that appear:
    $ ant adduser
  *** NOT IMPLEMENTED YET ***

Temporary solution:
  # CFS is installed with a default user called 'dhvadmin' that is solely responsible
  # for inserting the default table data for referential integrity.  This account
  # is also used for creating a single new user that will be the administrator of the
  # system.
  
  # A password for this user can be changed by typing the following, change the word test of course:
  $ java -cp .:/home/webapps/ROOT/WEB-INF/lib/aspcfs.jar org.aspcfs.utils.PasswordHash test
  
  # Now update the database with the encrypted password that was generated... 
  $ psql cdb_[company abbreviation] -c "UPDATE access SET password = '098f6bcd4621d373cade4e832627b4f6' WHERE username = 'dhvadmin';
  
  # The dhvadmin user can be disabled by setting the password to any word, or even null, once done.
  
  
  
*** PostgreSQL Tuning ***

[root]

PostgreSQL by default is very conservative.  It's a good idea to increase a few
things on the system.

# Increase the kernel shared memory
# This is a calculation based on ACTUAL server memory!!!
# To check the current shared memory on a system, use:
    $ cat /proc/sys/kernel/shmmax
# In this example, the server has 256MB so I want to increase shared memory to ~64MB
# 256Mb total, 64Mb shared, 12Mb sort
# 512Mb total, 128Mb shared, 12Mb sort
# 1Gb total, 256Mb shared, 32Mb sort

# The greater this number, the more PostgreSQL can load the database into memory
  $ vi /etc/sysctl.conf
  
  # Add the following line at the bottom:
    kernel.shmmax = 68403200

# To update the server at run-time, without rebooting:
  $ echo 68403200 > /proc/sys/kernel/shmmax

# Now modify postgresql configuration to use more memory
# This is a calculation based on the kernel shmmax!!!
  $ vi /var/lib/pgsql/data/postgresql.conf
  
  # Uncomment the following line and change the value:
  # shared buffers AT THE MOST can be (shmmax - 2867200) / 8192
    shared_buffers = 8000
  # Uncomment the following line and change the value:
  # sort_mem should not be too much, 512k is the default so try:
    sort_mem = 12288
    
# On an initial data load, set fsync=false, but turn it back on when done!!!
# This will speed up inserts but can cause data loss if the server fails

# PostgreSQL will need to be restarted after saving changes
  $ service postgresql restart
  

Vacuuming the database regularly is highly recommended to keep the indexes
up to date.

# In psql, try:
  # vacuum;

  
  
*** Tomcat Tuning ***

[root]
  
  # In /etc/profile change the amount of memory that Java uses
  # depending on the amount of memory the system has!!!!!!!
  # 256Mb total, use 128m
  # 512Mb total, use 256m
  # 1Gb total, use 512m
  $ vi /etc/profile
    export JAVA_OPTS=-Xmx128m -Xms128m
  
*** Software Maintenace ***

Even though the production server uses RAID, it is important that the database 
is remotely backed up, as well as the file library.  There are several ways to
handle this, the simplest being a download of the database that can be restored
to the same server or other servers fairly easily.

[user]

# Copy the postgres backup script
  $ cd ~/cfs2
  $ sudo cp cfs2/bin/postgres-backup.sh /var/lib/pgsql/
  $ sudo chown .postgres /var/lib/pgsql/postgres-backup.sh
  $ sudo chmod a+x /var/lib/pgsql/postgres-backup.sh

[root user]

# On this server make a cron entry to run postgres-backup.sh,
# the resulting backup will be in /home/backup/DB_BACKUP
  $ crontab -e
37 4 * * * su postgres -c "/var/lib/pgsql/postgres-backup.sh '' 127.0.0.1 all `date +%a`"

/* ALTERNATIVE CONFIGURATION: Run on a remote server */

# This script could also be installed on another server,
# just change the domain name/ip and make sure that
# postgres allows the other server access to this server by
# updating pg_hba.conf and iptables
37 4 * * * su postgres -c "/var/lib/pgsql/postgres-backup.sh '' 127.0.0.1 all `date +%a`"

# If the postgres version is not the same on both servers,
# then here is a solution:
- On a remote server, install Postgresql from the RPMs
- Copy the postgres-backup.sh from the ASPCFS distribution into /var/lib/pgsql
- For the corresponding Postgresql version number, copy the following files into
  /var/lib/pgsql/ so that the backup is compatible with future versions of postgresql
  $ cp /usr/bin/pg_dump /var/lib/pgsql/pg_dump723
  $ cp /usr/bin/pg_dumpall /var/lib/pgsql/pg_dumpall723
  $ cp /usr/bin/psql /var/lib/pgsql/psql723
  
  # Change all instances of: 
  #  pg_dump to pg_dump723, 
  #  pg_dumpall to pg_dumpall723
  #  psql to psql723
  # in the following files:
  $ vi pg_dump723
  $ vi pg_dumpall723
  
- Then you need to setup a cron task with the following

# Backup all the remote datebases for a server, and keep a 7 day rolling backup
# The first parameter after backup.sh is the Postgresql version to backup from,
# 723 matches Postgresql 7.2.3
37 4 * * * su postgres -c "/var/lib/pgsql/postgres-backup.sh 723 aspcfs.darkhorseventures.com all `date +%a`"




*** System Failure Recovery ***

[root user]

# Postgres
  # If the server is reset without shutting down, PostgreSQL might fail to startup,
  # use the following command to reset the process id:
  $ rm /var/lib/pgsql/data/postmaster.pid
  $ service postgresql start
  
